{"head":{"id":7092,"layout":"Post","route":"struct-la-gi-ban-chat-va-cach-su-dung","title":"Struct là gì? bản chất và cách sử dụng","tags":["union","data-structures","struct","c++"],"date":"2015-05-10T14:24:23.654Z","description":"Sử dụng struct trong chương trình\n\nOHM, lần trước chúng ta đã bàn về [Đệ Quy][1] rồi, bây giờ chúng ta lại quay về vấn đề cơ bản của ngôn…"},"body":"<h2 id=\"s-dng-struct-trong-chng-trnh\"><a href=\"#s-dng-struct-trong-chng-trnh\" class=\"statinamic-HeadingAnchor\">#</a>Sử dụng struct trong chương trình</h2>\n<p>OHM, lần trước chúng ta đã bàn về <a href=\"http://daynhauhoc.com/t/de-quy-dich-boi-breakdown/5719\">Đệ Quy</a> rồi, bây giờ chúng ta lại quay về vấn đề cơ bản của ngôn ngữ: STRUCT.\nTrong bài này mình sẽ  bàn về những vấn đề cơ bản nhất về struct và kèm theo những ví dụ cũng cơ bản không kém. Do bài dài nên mình không đủ thời gian dịch và update hằng ngày nên mọi người bookmark lại và đọc theo ngày nhé.\nBây giờ hãy mở đầu Struct bằng một ví dụ minh họa bên dưới nhé:</p>\n<pre><code>#include  &lt;iostream&gt;\nusing namespace std;\nstruct inflatable\n{\n    char name[20];\n    float volume;\n    double price;\n};\n\nint main()\n{\n    inflatable guest =\n    {\n        &quot;Glorious Gloria&quot;,    //namevalue\n        1.88,                //volum value\n        29.99                //price value\n    };                        //guest is  structure variable of  type inflatable\n    inflatable pal =\n    {\n        &quot;Audacious Arthur&quot;,\n        3.12,\n        32.99\n    };                        //pal is second variable of  type inflatable\n    //Note: som implementations require using static  inflatable guest =\n    cout &lt;&lt; &quot;Expand your guest  list with &quot; &lt;&lt; guest.name;\n    cout &lt;&lt; &quot; and &quot; &lt;&lt; pal.name &lt;&lt; endl;\n    //pal.name is  the name member of the pal variable\n    cout &lt;&lt; &quot;You can have both for $&quot; &lt;&lt; guest.price + pal.price &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>Code mình build bằng Visual 2013 nên nếu  những ai build bằng IDE khác thì có thể thay đổi chút ít để phù hợp, và dưới đây là kết quả của đoạn code trên:</p>\n<blockquote>\n<p>Expand your gues list with Glorious Gloria and Audacious Arthur!\nYou can have both for $62.98!</p>\n</blockquote>\n<p><strong>Lưu ý về chương trình</strong>\nMột điều cực kỳ tối quan trọng là cách mà bạn khai báo dữ liệu Struct trong ví dụ trên. Có hai lựa chọn cho chương trình structur.cpp. Bạn có thể đặt khai báo bên trong hàm main() và ngoài hàm. Và bạn cũng nên nhớ rằng struct chúng ta cũng có thể gọi nó là 1 kiểu dữ liệu được định nghĩa riêng. Điều này cũng có nghĩa rằng nó cũng có dạng “Biến nội bộ” v�� “Biến toàn cục”. Dựa vào vị trí đặt của Struct thì chúng ta có thể suy ra đươc biến Struct này là biến nội bộ hay biến toàn cục. Tùy vào vị trí đặt Struct thì chúng ta có cách sử  dụng khác nhau\nNotice: Trong bài này mình tạm gọi Struct là 1 biến để ngắn gọn nhé.\nBiến Struct toàn cục: là loại biến đặt bên ngoài hàm, được khai báo sau khi khai báo thư viện và namspace, loại biến này sử dụng được cho mọi hàm trong chương trình và chúng ta gọi tên tiếng anh mĩ miều là external declaration\nBiến Struct cục bộ: là loại biến được đặt bên trong hàm, được khai báo trong 1 hàm cố định và không được truy xuất bởi hàm khác, nói cách khác đó là biến chỉ sử dụng được bởi các funtion đặt chung dấu {} với nó.</p>\n<p>Ví dụ</p>\n<pre><code>int main()\n{\n    struct ID\n    {\n        int a;\n        int b;\n    };\n}\n</code></pre>\n<p>Như các bạn thấy đấy, Struct cũng được máy tính đối xử như 1 biến vậy, nó có thể được khai báo cục bộ hoặc toàn cục. Với cách khai báo toàn cục thì nó có thể được sử dụng bởi tất cả các hàm.\nQuay trở lại với ngôn ngữ C++, ngôn ngữ này không khuyến khích sử dụng biến toàn cục (external variable) nhưng nó khuyến khích sử dụng các struct extenal variable (có thể gọi là cấu trúc toàn cục).</p>\n<p>Bây giờ chúng ta lại nhìn cách mình sử dụng struct bênt trên. Cách mà mình khởi tạo 1 biến:</p>\n<pre><code>inflatable guest = \n{ \n    &quot;Glorious Gloria&quot;,    //namevalue\n    1.88,                //volum value\n    29.99                //price value\n};    \n</code></pre>\n<p>Giống như cách bạn truyền tham số vào một mảng, bạn cần để trong một dấu {} và cách nhau bởi một dấuphẩy. Mỗi giá trị được đặt trong một dòng. Tuy nhiên bạn có thể đặt tất  cả vào cùng 1 dòng mà không xảy ra lỗi. Nhưng nhớ rằng phải ngăn cách chúng bằng dấu phẩy, đó là quy tắc nếu bạn không muốn gặp lỗi khi compile bằng bất cứ complier nào.</p>\n<pre><code>Inflatable duck = {“daphne”, 0.12, 9.98};\n</code></pre>\n<p>Bạn có  thể khởi tạo mỗi  giá trị của struct bằng các kiểu dữ liệu  thích hợp. Trong ví dụ mình khái báo bên trên, biến name mình đã khai báo một mãng kiểu char, nhưng nếu sử dụng C++ thì bạn có thể khai báo  kiểu string, điều này không ảnh hưởng tới cách mà chương trình  chạy.</p>\n<p>Mỗi giá trị của Struct được đối xử như là một biến của kiểu dữ liệu. Như vậy, khi ta sử dụng biến pal.price thì đây là một biến kiểu double và pal.name là một kiểu char[]. Và khi mà ta sử dụng lệnh cout để xuất dữ liệu ra màn hình với biến pal.name thì máy tính sẽ tự động chọn kiểu string (hay char[]). Cũng như thế, pal.name cũng là một mảng ký tự và chúng ta có thể sử dụng nó như là một mảng. Khi bạn truy xuất giá trị tại pal.name[0] thì bạn sẽ nhận được một giá tị ‘A’, nhưng khi bạn truy xuất pal[0] thì nó hoàn toàn vô nghĩa bởi vì pal là một struct chứ không phải là một mảng(array).</p>\n<hr>\n<h2 id=\"khai-bo-struct-trong-c-11\"><a href=\"#khai-bo-struct-trong-c-11\" class=\"statinamic-HeadingAnchor\">#</a>KHAI BÁO STRUCT TRONG C++ 11</h2>\n<hr>\n<p>Giống như mảng, C++11 mở rộng cách mà ta có thể khai báo và sử dụng struct một cách linh hoạt. Thay vì chúng ta cần phải sử dụng dấu “=” thì nay chúng ta có thể quên nó đi.</p>\n<pre><code>Inflatable duck {“daphne”, 0.12, 9.98};\n</code></pre>\n<p>Tiếp theo, mỗi thành phần chưa được gán trị  thay vì nó sẽ là một giá trị rác thì nay mặc định sẽ là 0. Ví dụ, khi mà khai báo một biến có kiểu inflatable mayor thì giá trị ta nhận về khi truy xuất mayor.price hay mayor.volume sẽ  là  0.\nTuy nhiên ta có mayor.name được định nghĩa là  một  mảng ký tự thì tất cả các byte trong mảng mayor.name sẽ được đặt là 0 (hoặc  gọi cách khác đây là ký tự NULL).\nCách mà ta khai báo biến mayor để có các giá trị trên là:</p>\n<pre><code>Inflatable mayor{};\n</code></pre>\n<h2 id=\"liu-struct-c-th-s-dng-c-class-string-khng\"><a href=\"#liu-struct-c-th-s-dng-c-class-string-khng\" class=\"statinamic-HeadingAnchor\">#</a>LIỆU STRUCT CÓ THỂ SỬ DỤNG ĐƯỢC CLASS STRING KHÔNG?</h2>\n<p>Liệu chúng ta có thể dùng các đối tượng bên trong Class String để sử dụng cho mảng ký tự name? Tất nhiên, bạn có thể khai báo một structure giống thế này:</p>\n<pre><code>struct inflatable\n{\n    std::string name;\n    float volume;\n    double price;\n};\n</code></pre>\n<p>Tất nhiên câu trả lời là có thể rồi trừ khi bạn đang sử dụng một IDE hay compiler bản cũ hoặc đã lỗi thời từ lâu thì nó không được hỗ trợ khai báo structure với class string.</p>\n<p>Hãy chắc chắn rằng structure bạn khai báo có quyền truy cập vào namespace std. Bạn có thể khai báo sau khi khai báo thư viện hoặc trong khi khai báo struct như cách mà mình làm bên trên, sử  dụng: std: :string</p>\n<h2 id=\"mt-s-thuc-tnh-khc-ca-struct\"><a href=\"#mt-s-thuc-tnh-khc-ca-struct\" class=\"statinamic-HeadingAnchor\">#</a>MỘT SỐ THUỘC TÍNH KHÁC CỦA STRUCT</h2>\n<p>C++ tạo cho người dùng một môi trường đơn giản nhất có thể để sử dụng “built-in-type”. Ví dụ,  bạn có thể  sử  dụng cấu trúc như là một đối số, và bạn có thể sử dụng structure  như một kiểu dữ liệu của hàm  và return giá trị của  structure đó. Tất nhiên bạn có thể sử dụng các operator (=)  để gán một giá trị của struct cho một biến khác cùng với kiểu đã khai báo. Ví dụ:\n<br>\nchar[50] palprice = pal.prices;</p>\n<p>Như chúng ta  thấy  đấy, các “member” được khai báo trong struct cũng được đối  xử như là một variable. Bây giờ chúng ta hãy xem ví  dụ tiếp theo bên dưới</p>\n<pre><code>#include  &lt;iostream&gt;\nusing namespace std;\nstruct inflatable\n{\n    char name[20];\n    float volume;\n    double price;\n};\n\nint main()\n{\n    inflatable bouquet =\n    {\n        &quot;sunflower&quot;,\n        0.20,\n        12.49\n    };\n    inflatable pal =\n    {\n        &quot;Audacious Arthur&quot;,\n        3.12,\n        32.99\n    };\n    inflatable choice;\n    cout &lt;&lt; &quot;bouquet: &quot; &lt;&lt; bouquet.name &lt;&lt; &quot;for $&quot; &lt;&lt; bouquet.price &lt;&lt; endl;\n    choice = bouquet;\n    cout &lt;&lt; &quot;choice: &quot; &lt;&lt; choice.name &lt;&lt; &quot;for $&quot; &lt;&lt; choice.price &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>Và đây là kết quả của đoạn code bên trên:</p>\n<blockquote>\n<p>Bouquet: sunflower for $12.49\nChoice: sunflower for $12.49</p>\n</blockquote>\n<p>Như bạn đã thấy, cả hai giá trị của Bouquet và Choice đều bằng nhau. Bạn có thể phối hợp định nghĩa 1 cấu trúc và gán thẳng variable cho nó. Để làm được việc này, bạn khai báo thẳng variable sau khi khai báo một struct</p>\n<pre><code>truct perks\n{\n    int key_number;\n    char car[12];\n} mr_smith, ms_jones;\n</code></pre>\n<p>Mặc dù cách này vẫn giúp chương trình hoạt động bình thường, tuy nhiên các lập trình viên đều chia ra vì viết giống vậy rất khó để theo dõi chương trình và sửa lỗi.</p>\n<p>Một cách khác là bạn có thể tạo dựng 1 struct không tên và gọi một variable sau khi đã định nghĩa xong struct. Như ví dụ dưới đây:</p>\n<pre><code>struct perks\n{\n    int key_number;\n    char car[12];\n} mr_glitz =\n{\n    7,\n    &quot;Packard&quot;\n};\n</code></pre>\n<p>Trong đoạn code này:</p>\n<pre><code>struct\n{\n    int x;\n    int y;\n} position;\n</code></pre>\n<p>Chương trình sẽ tạo dựng một biến struct và gọi nó là position. Bạn có thể truy xuất các “member” của position bằng “membership operation”, ví dụ như là  position.x, nhưng nếu bạn sử  dụng cách khai báo này thì bạn sẽ chỉ có duy nhất một biên postion có thể sử dụng struct này. Và sau đó bạn không thể tạo một biến khác có thể sử dụng chung struct như thế. Nói cách khác, biến position là đặc biệt.</p>\n<h2 id=\"mng-struct\"><a href=\"#mng-struct\" class=\"statinamic-HeadingAnchor\">#</a>MẢNG STRUCT</h2>\n<p>Trong struct inflatable được định nghĩa ở đầu  bàu có chứa một mảng (char name[]). Nó cũng có khả năng tạo mảng mà  các phần tử là struct. Kỹ thuật để tạo nên một mảng kiểu struct chính là cách mà ta hay sử dụng để tạo 1 mảng của 1 kiểu dữ liệu nào đó.</p>\n<pre><code>Inflatable gifts[100]; // array of 100  inflatable structures\n</code></pre>\n<p>Đây là dòng lệnh để tạo ra một mảng có 100 phần tử kiểu &gt; <code>inflatable</code>. Vì thế mỗi phần tử trong mảng từ <code>gifts[0]</code> tới <code>gifts[99]</code> đều  có kiểu của <code>struct inflatable</code>:</p>\n<pre><code>cin &gt;&gt; gifts[0].volume; // use volume member  of  first struct\ncout &lt;&lt; gifts[99].price  &lt;&lt; endl; // display price member if last struct\n</code></pre>\n<p>Nhưng hãy nhớ rằng gifts là tên của mảng chứ không phải là variable, việc truy xuất gift.price sẽ vô nghĩa và bạn sẽ nhanh chóng bị báo lỗi bởi compiler.\nĐể khai báo một mảng struct, ta cũng  có thể ghép chúng lại bằng cách bên dưới:</p>\n<pre><code>Inflatable guests[2] =        // khai báo mảng kiểu struct\n{\n    {“Bambi”, 0.5, 21.99},        //giá trị đầu tiên của mảng\n    {“Godzilla”, 2000, 565.99}    //giá trị tiếp theo\n}\n</code></pre>\n<p>Như cách mọi người thường dùng, bạn có thể định nghĩa bằng cách bạn thích. Ví dụ, cả hai cách định nghĩa có thể đặt ở chung 1 dòng hay tách từng dòng để dễ đọc.</p>\n<p>Ví dụ tiếp theo sẽ hướng dẫn cách mà bạn sẽ sử dụng và truy xuất dữ liệu sử dụng dấu chấm “.” (dot operation)</p>\n<pre><code>#include &lt;iostream&gt;\nstruct inflatable\n{\n    char name[20];\n    float volume;\n    double price;\n};\nint main()\n{\n    using namespace  std;\n    inflatable  guests[2] =\n    {\n        {&quot;Bambi, 0.5, 21.99&quot;},\n        {&quot;Godzilla, 2000, 565.99&quot;}\n    };\n    cout &lt;&lt; &quot;The guests&quot; &lt;&lt; guests[0].name &lt;&lt; &quot; and &quot; &lt;&lt; guests[1].name;\n    cout &lt;&lt; &quot;\\n Have a  combined volume of &quot; &lt;&lt; guests[0].volume + guests[1].volume &lt;&lt; &quot; 2000.5 cubic feet.\\n&quot;;\n    return 0;\n}\n</code></pre>\n<p>Và đây là kết quả sau khi chương trình chạy:</p>\n<blockquote>\n<p>The guests Bambi and Godzilla\nHave a  combined volume of 2000.5 cubic feet.</p>\n</blockquote>\n<h2 id=\"bit-fields-trong-struct\"><a href=\"#bit-fields-trong-struct\" class=\"statinamic-HeadingAnchor\">#</a>BIT FIELDS TRONG STRUCT</h2>\n<p>C++ cũng như C cho phép bạn chỉ định  số lượng bit mà bạn muốn sử dụng. Điều này thực sự hữu dụng khi bạn tạo một data structure, bạn có thể chỉ định bạn cần bao nhiêu bộ nhớ. Vùng Fields này nên là một biến hoặc một kiểu dữ liệu ta không dùng tới. Ví dụ sau:</p>\n<pre><code>Struct torgle_register\n{\n    Unsigned in SN : 4;    // dùng 4 bit cho giá trị SN;\n    Unsigned  int : 4;    // 4 bit này không dùng tới\n    Bool goodIn :  1;    // valid input (1 bit)\n    Bool goodTorgle : 1    // successful torgling\n};\n</code></pre>\n<p>Bạn có thể định nghĩa fields cực kỳ linh hoạt, và bạn có thể sử dụng ký hiệu để truy cập các byte field:</p>\n<pre><code>Torge_register tr = {14, true, false};\n…\nIf(tr.goodIn)\n…\n</code></pre>\n<p>Bit Fields thường được sử dụng trong lập trình cấp thấp cho các vi xử lý. Tuy nhiên bạn có thể sử dụng nó như là 1 flag để đánh dấu khi sử  dụng pointer.</p>\n<h2 id=\"unions\"><a href=\"#unions\" class=\"statinamic-HeadingAnchor\">#</a>UNIONS</h2>\n<p>Union là một kiểu dữ liệu cũng  khá giống struct về cách định nghĩa cùng như cách sử dụng. Nhưng nó khác Struct tại một thời điểm nó chỉ lưu được một giá trị duy nhất.\nQuay trở lại các ví  dụ trước, ta có 1 struct tên <code>Inflatable</code> có chứa nhiều kiểu dữ liệu bên trong. Ta có gọi một “biến” với tên <code>pal</code> và ta  truy xuất dữ liệu theo <code>pal.name, pal.prices….</code> và dữ liệu được truy xuất được lưu vào các biến của <code>pal.name, pal.prices…</code></p>\n<p><strong>Vậy  Union lưu dữ liệu  thế  nào?</strong>\nUnion chỉ lưu 1 dữ liệu tại một thời  điểm. Để hiểu rõ hơn thì bạn hãy xem ví dụ bên dưới đây về union:</p>\n<pre><code>Union one4all\n{\n    Int int_val;\n    Long  long_val;\n    Double double_val;\n};\n</code></pre>\n<p>Nhìn sơ lược bạn có thể thấy rằng union one4all chỉ có thể lưu giữ 3 kiểu dữ liệu là interger, long và double. Và chúng ta hãy tiếp tục những dòng code tiếp theo:</p>\n<pre><code>one4all pail;\npail.int_val = 15;\nCout &lt;&lt; pail.int_val &lt;&lt; endl;\npail.double_val =  1.38;\ncout &lt;&lt; pail.double_val &lt;&lt; endl;\ncout &lt;&lt; pail.int_val &lt;&lt; endl;\n</code></pre>\n<p>Như chúng ta  thấy, pail chỉ lưu giá trị int tại 1 thời điểm và tại một thời điểm khác (<code>pail.double_val</code>) thì giá trị cuả int sẽ bị mất. Biến sẽ chỉ lưu trữ giá trị tại thời điểm nó được gọi. Bởi vì union chỉ lưu trữ một giá trị tại một thời  điểm, nó không có đủ bộ nhớ để giữ những giá trị khác. Vì thế, kích thước bộ nhớ của Union là kích thước của biến có kiểu dữ liệu lớn nhất.</p>\n<p>Mục đích của việc sử dụng union là để tiết kiệm bộ nhớ khi mà dữ liệu đầu vào có thể  có  nhiều định dạng nhưng không bao giờ được sử dụng đồng thời. Ví dụ, giar sử bạn đang quản lý một “hỗn tạp” các kiểu dữ liệu, một vài thứ trong đó nên sử dụng int ID, một số khác thì dùng string ID, một khác  nữa là double, bla  bla bla. Nếu bạn sử  dụng các khai báo biến bình thường  thì bạn cần khai báo rất nhiều biến và rất nhiều kiểu dữ liệu. Tuy nhiên với union bạn có thể làm theo cách bên dưới đây:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nstruct widget\n{\n    char brand[20];\n    int type;\n    union ID\n    {\n        long id_num;\n        char id_char[20];\n    } id_val;\n};\nint main()\n{\n    widget prize;\n    if (prize.type == 1)\n    {\n        cin &gt;&gt; prize.id_val.id_num;\n    }\n    else\n    {\n        cin &gt;&gt; prize.id_val.id_char;\n    }\n}\n</code></pre>\n<p>Anonymous union không có tên; bản chất đó là nhiều biến nhưng được lưu vào một vùng nhớ nhất định:</p>\n<pre><code>union ID\n{\n    long id_num;\n    char id_char[20];\n} id_val;\n</code></pre>\n<p>Bởi vì union là Anonymous, các biến id_num và id_char được đối xử như hai “biến con” của prize và được lưu trong 1 vùng nhớ nhất định. Nó  chỉ cần một cái tên trung gian để truy  xuất vào vùng nhớ đó (là id_num hay id_char) tùy thuộc vào lập trình viên chọn cái nào để sử dụng.\nUnion thường được  sử dụng để tiết kiệm bộ nhớ.  Nó có vẻ không cần thiết khi mà bộ nhớ RAM ngày nay  thực sự lớn và lên tới hàng gigabyte và hàng terabytes cho  ổ đĩa. Nhưng không dừng lại ở đó, hằng ngày có rất nhiều lập trình viên đang sử dụng union như cứu cánh trong lĩnh vực hệ thống nhúng, nơi mà bộ nhớ và cả ram bị giới hạn rất là nhiều.</p>\n","rawBody":"\nSử dụng struct trong chương trình\n---------------------------------\n\nOHM, lần trước chúng ta đã bàn về [Đệ Quy][1] rồi, bây giờ chúng ta lại quay về vấn đề cơ bản của ngôn ngữ: STRUCT.\nTrong bài này mình sẽ  bàn về những vấn đề cơ bản nhất về struct và kèm theo những ví dụ cũng cơ bản không kém. Do bài dài nên mình không đủ thời gian dịch và update hằng ngày nên mọi người bookmark lại và đọc theo ngày nhé.\nBây giờ hãy mở đầu Struct bằng một ví dụ minh họa bên dưới nhé:\n\n```\n#include  <iostream>\nusing namespace std;\nstruct inflatable\n{\n    char name[20];\n    float volume;\n    double price;\n};\n\nint main()\n{\n    inflatable guest =\n    {\n        \"Glorious Gloria\",    //namevalue\n        1.88,                //volum value\n        29.99                //price value\n    };                        //guest is  structure variable of  type inflatable\n    inflatable pal =\n    {\n        \"Audacious Arthur\",\n        3.12,\n        32.99\n    };                        //pal is second variable of  type inflatable\n    //Note: som implementations require using static  inflatable guest =\n    cout << \"Expand your guest  list with \" << guest.name;\n    cout << \" and \" << pal.name << endl;\n    //pal.name is  the name member of the pal variable\n    cout << \"You can have both for $\" << guest.price + pal.price << endl;\n    return 0;\n}\n```\n\nCode mình build bằng Visual 2013 nên nếu  những ai build bằng IDE khác thì có thể thay đổi chút ít để phù hợp, và dưới đây là kết quả của đoạn code trên:\n\n> Expand your gues list with Glorious Gloria and Audacious Arthur!\n> You can have both for $62.98!\n\n\n**Lưu ý về chương trình**\nMột điều cực kỳ tối quan trọng là cách mà bạn khai báo dữ liệu Struct trong ví dụ trên. Có hai lựa chọn cho chương trình structur.cpp. Bạn có thể đặt khai báo bên trong hàm main() và ngoài hàm. Và bạn cũng nên nhớ rằng struct chúng ta cũng có thể gọi nó là 1 kiểu dữ liệu được định nghĩa riêng. Điều này cũng có nghĩa rằng nó cũng có dạng “Biến nội bộ” v�� “Biến toàn cục”. Dựa vào vị trí đặt của Struct thì chúng ta có thể suy ra đươc biến Struct này là biến nội bộ hay biến toàn cục. Tùy vào vị trí đặt Struct thì chúng ta có cách sử  dụng khác nhau\nNotice: Trong bài này mình tạm gọi Struct là 1 biến để ngắn gọn nhé.\nBiến Struct toàn cục: là loại biến đặt bên ngoài hàm, được khai báo sau khi khai báo thư viện và namspace, loại biến này sử dụng được cho mọi hàm trong chương trình và chúng ta gọi tên tiếng anh mĩ miều là external declaration \nBiến Struct cục bộ: là loại biến được đặt bên trong hàm, được khai báo trong 1 hàm cố định và không được truy xuất bởi hàm khác, nói cách khác đó là biến chỉ sử dụng được bởi các funtion đặt chung dấu {} với nó.\n\n\nVí dụ\n\n```\nint main()\n{\n    struct ID\n    {\n        int a;\n        int b;\n    };\n}\n```\n\nNhư các bạn thấy đấy, Struct cũng được máy tính đối xử như 1 biến vậy, nó có thể được khai báo cục bộ hoặc toàn cục. Với cách khai báo toàn cục thì nó có thể được sử dụng bởi tất cả các hàm. \nQuay trở lại với ngôn ngữ C++, ngôn ngữ này không khuyến khích sử dụng biến toàn cục (external variable) nhưng nó khuyến khích sử dụng các struct extenal variable (có thể gọi là cấu trúc toàn cục).\n\nBây giờ chúng ta lại nhìn cách mình sử dụng struct bênt trên. Cách mà mình khởi tạo 1 biến:\n\n```\ninflatable guest = \n{ \n    \"Glorious Gloria\",    //namevalue\n    1.88,                //volum value\n    29.99                //price value\n};    \n```\n\nGiống như cách bạn truyền tham số vào một mảng, bạn cần để trong một dấu {} và cách nhau bởi một dấuphẩy. Mỗi giá trị được đặt trong một dòng. Tuy nhiên bạn có thể đặt tất  cả vào cùng 1 dòng mà không xảy ra lỗi. Nhưng nhớ rằng phải ngăn cách chúng bằng dấu phẩy, đó là quy tắc nếu bạn không muốn gặp lỗi khi compile bằng bất cứ complier nào.\n\n    Inflatable duck = {“daphne”, 0.12, 9.98};\n\nBạn có  thể khởi tạo mỗi  giá trị của struct bằng các kiểu dữ liệu  thích hợp. Trong ví dụ mình khái báo bên trên, biến name mình đã khai báo một mãng kiểu char, nhưng nếu sử dụng C++ thì bạn có thể khai báo  kiểu string, điều này không ảnh hưởng tới cách mà chương trình  chạy.\n\nMỗi giá trị của Struct được đối xử như là một biến của kiểu dữ liệu. Như vậy, khi ta sử dụng biến pal.price thì đây là một biến kiểu double và pal.name là một kiểu char[]. Và khi mà ta sử dụng lệnh cout để xuất dữ liệu ra màn hình với biến pal.name thì máy tính sẽ tự động chọn kiểu string (hay char[]). Cũng như thế, pal.name cũng là một mảng ký tự và chúng ta có thể sử dụng nó như là một mảng. Khi bạn truy xuất giá trị tại pal.name[0] thì bạn sẽ nhận được một giá tị ‘A’, nhưng khi bạn truy xuất pal[0] thì nó hoàn toàn vô nghĩa bởi vì pal là một struct chứ không phải là một mảng(array).\n\n---\n\nKHAI BÁO STRUCT TRONG C++ 11\n----------------------------\n\n---\n\nGiống như mảng, C++11 mở rộng cách mà ta có thể khai báo và sử dụng struct một cách linh hoạt. Thay vì chúng ta cần phải sử dụng dấu “=” thì nay chúng ta có thể quên nó đi.\n\n    Inflatable duck {“daphne”, 0.12, 9.98};\n\nTiếp theo, mỗi thành phần chưa được gán trị  thay vì nó sẽ là một giá trị rác thì nay mặc định sẽ là 0. Ví dụ, khi mà khai báo một biến có kiểu inflatable mayor thì giá trị ta nhận về khi truy xuất mayor.price hay mayor.volume sẽ  là  0.\nTuy nhiên ta có mayor.name được định nghĩa là  một  mảng ký tự thì tất cả các byte trong mảng mayor.name sẽ được đặt là 0 (hoặc  gọi cách khác đây là ký tự NULL).\nCách mà ta khai báo biến mayor để có các giá trị trên là:\n\n    Inflatable mayor{};\n\nLIỆU STRUCT CÓ THỂ SỬ DỤNG ĐƯỢC CLASS STRING KHÔNG?\n---------------------------------------------------\n\nLiệu chúng ta có thể dùng các đối tượng bên trong Class String để sử dụng cho mảng ký tự name? Tất nhiên, bạn có thể khai báo một structure giống thế này:\n\n```\nstruct inflatable\n{\n\tstd::string name;\n\tfloat volume;\n\tdouble price;\n};\n```\n\nTất nhiên câu trả lời là có thể rồi trừ khi bạn đang sử dụng một IDE hay compiler bản cũ hoặc đã lỗi thời từ lâu thì nó không được hỗ trợ khai báo structure với class string.\n\nHãy chắc chắn rằng structure bạn khai báo có quyền truy cập vào namespace std. Bạn có thể khai báo sau khi khai báo thư viện hoặc trong khi khai báo struct như cách mà mình làm bên trên, sử  dụng: std: :string\n\nMỘT SỐ THUỘC TÍNH KHÁC CỦA STRUCT\n---------------------------------\n\nC++ tạo cho người dùng một môi trường đơn giản nhất có thể để sử dụng “built-in-type”. Ví dụ,  bạn có thể  sử  dụng cấu trúc như là một đối số, và bạn có thể sử dụng structure  như một kiểu dữ liệu của hàm  và return giá trị của  structure đó. Tất nhiên bạn có thể sử dụng các operator (=)  để gán một giá trị của struct cho một biến khác cùng với kiểu đã khai báo. Ví dụ: \n       \n    char[50] palprice = pal.prices;\n\nNhư chúng ta  thấy  đấy, các “member” được khai báo trong struct cũng được đối  xử như là một variable. Bây giờ chúng ta hãy xem ví  dụ tiếp theo bên dưới\n\n```\n#include  <iostream>\nusing namespace std;\nstruct inflatable\n{\n    char name[20];\n    float volume;\n    double price;\n};\n\nint main()\n{\n    inflatable bouquet =\n    {\n        \"sunflower\",\n        0.20,\n        12.49\n    };\n    inflatable pal =\n    {\n        \"Audacious Arthur\",\n        3.12,\n        32.99\n    };\n    inflatable choice;\n    cout << \"bouquet: \" << bouquet.name << \"for $\" << bouquet.price << endl;\n    choice = bouquet;\n    cout << \"choice: \" << choice.name << \"for $\" << choice.price << endl;\n    return 0;\n}\n```\n\nVà đây là kết quả của đoạn code bên trên:\n\n> Bouquet: sunflower for $12.49\n> Choice: sunflower for $12.49\n\nNhư bạn đã thấy, cả hai giá trị của Bouquet và Choice đều bằng nhau. Bạn có thể phối hợp định nghĩa 1 cấu trúc và gán thẳng variable cho nó. Để làm được việc này, bạn khai báo thẳng variable sau khi khai báo một struct\n\n```\ntruct perks\n{\n    int key_number;\n    char car[12];\n} mr_smith, ms_jones;\n```\n\nMặc dù cách này vẫn giúp chương trình hoạt động bình thường, tuy nhiên các lập trình viên đều chia ra vì viết giống vậy rất khó để theo dõi chương trình và sửa lỗi.\n\nMột cách khác là bạn có thể tạo dựng 1 struct không tên và gọi một variable sau khi đã định nghĩa xong struct. Như ví dụ dưới đây:\n\n```\nstruct perks\n{\n    int key_number;\n    char car[12];\n} mr_glitz =\n{\n    7,\n    \"Packard\"\n};\n```\n\nTrong đoạn code này:\n\n```\nstruct\n{\n    int x;\n    int y;\n} position;\n```\n\nChương trình sẽ tạo dựng một biến struct và gọi nó là position. Bạn có thể truy xuất các “member” của position bằng “membership operation”, ví dụ như là  position.x, nhưng nếu bạn sử  dụng cách khai báo này thì bạn sẽ chỉ có duy nhất một biên postion có thể sử dụng struct này. Và sau đó bạn không thể tạo một biến khác có thể sử dụng chung struct như thế. Nói cách khác, biến position là đặc biệt.\n\nMẢNG STRUCT\n-----------\n\nTrong struct inflatable được định nghĩa ở đầu  bàu có chứa một mảng (char name[]). Nó cũng có khả năng tạo mảng mà  các phần tử là struct. Kỹ thuật để tạo nên một mảng kiểu struct chính là cách mà ta hay sử dụng để tạo 1 mảng của 1 kiểu dữ liệu nào đó.\n\n```\nInflatable gifts[100]; // array of 100  inflatable structures\n```\n\nĐây là dòng lệnh để tạo ra một mảng có 100 phần tử kiểu > `inflatable`. Vì thế mỗi phần tử trong mảng từ `gifts[0]` tới `gifts[99]` đều  có kiểu của `struct inflatable`:\n\n    cin >> gifts[0].volume; // use volume member  of  first struct\n    cout << gifts[99].price  << endl; // display price member if last struct\n\nNhưng hãy nhớ rằng gifts là tên của mảng chứ không phải là variable, việc truy xuất gift.price sẽ vô nghĩa và bạn sẽ nhanh chóng bị báo lỗi bởi compiler.\nĐể khai báo một mảng struct, ta cũng  có thể ghép chúng lại bằng cách bên dưới:\n\n```\nInflatable guests[2] =        // khai báo mảng kiểu struct\n{\n    {“Bambi”, 0.5, 21.99},        //giá trị đầu tiên của mảng\n    {“Godzilla”, 2000, 565.99}    //giá trị tiếp theo\n}\n```\n\nNhư cách mọi người thường dùng, bạn có thể định nghĩa bằng cách bạn thích. Ví dụ, cả hai cách định nghĩa có thể đặt ở chung 1 dòng hay tách từng dòng để dễ đọc.\n\nVí dụ tiếp theo sẽ hướng dẫn cách mà bạn sẽ sử dụng và truy xuất dữ liệu sử dụng dấu chấm “.” (dot operation)\n\n```\n#include <iostream>\nstruct inflatable\n{\n    char name[20];\n    float volume;\n    double price;\n};\nint main()\n{\n    using namespace  std;\n    inflatable  guests[2] =\n    {\n        {\"Bambi, 0.5, 21.99\"},\n        {\"Godzilla, 2000, 565.99\"}\n    };\n    cout << \"The guests\" << guests[0].name << \" and \" << guests[1].name;\n    cout << \"\\n Have a  combined volume of \" << guests[0].volume + guests[1].volume << \" 2000.5 cubic feet.\\n\";\n    return 0;\n}\n```\n\nVà đây là kết quả sau khi chương trình chạy:\n\n> The guests Bambi and Godzilla\n> Have a  combined volume of 2000.5 cubic feet.\n\nBIT FIELDS TRONG STRUCT\n-----------------------\n\nC++ cũng như C cho phép bạn chỉ định  số lượng bit mà bạn muốn sử dụng. Điều này thực sự hữu dụng khi bạn tạo một data structure, bạn có thể chỉ định bạn cần bao nhiêu bộ nhớ. Vùng Fields này nên là một biến hoặc một kiểu dữ liệu ta không dùng tới. Ví dụ sau:\n\n```\nStruct torgle_register\n{\n    Unsigned in SN : 4;    // dùng 4 bit cho giá trị SN;\n    Unsigned  int : 4;    // 4 bit này không dùng tới\n    Bool goodIn :  1;    // valid input (1 bit)\n    Bool goodTorgle : 1    // successful torgling\n};\n```\n\nBạn có thể định nghĩa fields cực kỳ linh hoạt, và bạn có thể sử dụng ký hiệu để truy cập các byte field:\n\n```\nTorge_register tr = {14, true, false};\n…\nIf(tr.goodIn)\n…\n```\n\nBit Fields thường được sử dụng trong lập trình cấp thấp cho các vi xử lý. Tuy nhiên bạn có thể sử dụng nó như là 1 flag để đánh dấu khi sử  dụng pointer.\n\nUNIONS\n------\n\nUnion là một kiểu dữ liệu cũng  khá giống struct về cách định nghĩa cùng như cách sử dụng. Nhưng nó khác Struct tại một thời điểm nó chỉ lưu được một giá trị duy nhất.\nQuay trở lại các ví  dụ trước, ta có 1 struct tên `Inflatable` có chứa nhiều kiểu dữ liệu bên trong. Ta có gọi một “biến” với tên `pal` và ta  truy xuất dữ liệu theo `pal.name, pal.prices….` và dữ liệu được truy xuất được lưu vào các biến của `pal.name, pal.prices…`\n\n**Vậy  Union lưu dữ liệu  thế  nào?**\nUnion chỉ lưu 1 dữ liệu tại một thời  điểm. Để hiểu rõ hơn thì bạn hãy xem ví dụ bên dưới đây về union:\n\n```\nUnion one4all\n{\n    Int int_val;\n    Long  long_val;\n    Double double_val;\n};\n```\n\nNhìn sơ lược bạn có thể thấy rằng union one4all chỉ có thể lưu giữ 3 kiểu dữ liệu là interger, long và double. Và chúng ta hãy tiếp tục những dòng code tiếp theo:\n\n```\none4all pail;\npail.int_val = 15;\nCout << pail.int_val << endl;\npail.double_val =  1.38;\ncout << pail.double_val << endl;\ncout << pail.int_val << endl;\n```\n\nNhư chúng ta  thấy, pail chỉ lưu giá trị int tại 1 thời điểm và tại một thời điểm khác (`pail.double_val`) thì giá trị cuả int sẽ bị mất. Biến sẽ chỉ lưu trữ giá trị tại thời điểm nó được gọi. Bởi vì union chỉ lưu trữ một giá trị tại một thời  điểm, nó không có đủ bộ nhớ để giữ những giá trị khác. Vì thế, kích thước bộ nhớ của Union là kích thước của biến có kiểu dữ liệu lớn nhất.\n\nMục đích của việc sử dụng union là để tiết kiệm bộ nhớ khi mà dữ liệu đầu vào có thể  có  nhiều định dạng nhưng không bao giờ được sử dụng đồng thời. Ví dụ, giar sử bạn đang quản lý một “hỗn tạp” các kiểu dữ liệu, một vài thứ trong đó nên sử dụng int ID, một số khác thì dùng string ID, một khác  nữa là double, bla  bla bla. Nếu bạn sử  dụng các khai báo biến bình thường  thì bạn cần khai báo rất nhiều biến và rất nhiều kiểu dữ liệu. Tuy nhiên với union bạn có thể làm theo cách bên dưới đây:\n\n```\n#include <iostream>\nusing namespace std;\nstruct widget\n{\n    char brand[20];\n    int type;\n    union ID\n    {\n        long id_num;\n        char id_char[20];\n    } id_val;\n};\nint main()\n{\n    widget prize;\n    if (prize.type == 1)\n    {\n        cin >> prize.id_val.id_num;\n    }\n    else\n    {\n        cin >> prize.id_val.id_char;\n    }\n}\n```\n\nAnonymous union không có tên; bản chất đó là nhiều biến nhưng được lưu vào một vùng nhớ nhất định:\n\n```\nunion ID\n{\n    long id_num;\n    char id_char[20];\n} id_val;\n```\n\nBởi vì union là Anonymous, các biến id_num và id_char được đối xử như hai “biến con” của prize và được lưu trong 1 vùng nhớ nhất định. Nó  chỉ cần một cái tên trung gian để truy  xuất vào vùng nhớ đó (là id_num hay id_char) tùy thuộc vào lập trình viên chọn cái nào để sử dụng.\nUnion thường được  sử dụng để tiết kiệm bộ nhớ.  Nó có vẻ không cần thiết khi mà bộ nhớ RAM ngày nay  thực sự lớn và lên tới hàng gigabyte và hàng terabytes cho  ổ đĩa. Nhưng không dừng lại ở đó, hằng ngày có rất nhiều lập trình viên đang sử dụng union như cứu cánh trong lĩnh vực hệ thống nhúng, nơi mà bộ nhớ và cả ram bị giới hạn rất là nhiều.\n\n\n  [1]: http://daynhauhoc.com/t/de-quy-dich-boi-breakdown/5719\n","raw":"---json\n{\"id\":7092,\"layout\":\"Post\",\"route\":\"struct-la-gi-ban-chat-va-cach-su-dung\",\"title\":\"Struct là gì? bản chất và cách sử dụng\",\"tags\":[\"union\",\"data-structures\",\"struct\",\"c++\"],\"date\":\"2015-05-10T14:24:23.654Z\"}\n---\n\nSử dụng struct trong chương trình\n---------------------------------\n\nOHM, lần trước chúng ta đã bàn về [Đệ Quy][1] rồi, bây giờ chúng ta lại quay về vấn đề cơ bản của ngôn ngữ: STRUCT.\nTrong bài này mình sẽ  bàn về những vấn đề cơ bản nhất về struct và kèm theo những ví dụ cũng cơ bản không kém. Do bài dài nên mình không đủ thời gian dịch và update hằng ngày nên mọi người bookmark lại và đọc theo ngày nhé.\nBây giờ hãy mở đầu Struct bằng một ví dụ minh họa bên dưới nhé:\n\n```\n#include  <iostream>\nusing namespace std;\nstruct inflatable\n{\n    char name[20];\n    float volume;\n    double price;\n};\n\nint main()\n{\n    inflatable guest =\n    {\n        \"Glorious Gloria\",    //namevalue\n        1.88,                //volum value\n        29.99                //price value\n    };                        //guest is  structure variable of  type inflatable\n    inflatable pal =\n    {\n        \"Audacious Arthur\",\n        3.12,\n        32.99\n    };                        //pal is second variable of  type inflatable\n    //Note: som implementations require using static  inflatable guest =\n    cout << \"Expand your guest  list with \" << guest.name;\n    cout << \" and \" << pal.name << endl;\n    //pal.name is  the name member of the pal variable\n    cout << \"You can have both for $\" << guest.price + pal.price << endl;\n    return 0;\n}\n```\n\nCode mình build bằng Visual 2013 nên nếu  những ai build bằng IDE khác thì có thể thay đổi chút ít để phù hợp, và dưới đây là kết quả của đoạn code trên:\n\n> Expand your gues list with Glorious Gloria and Audacious Arthur!\n> You can have both for $62.98!\n\n\n**Lưu ý về chương trình**\nMột điều cực kỳ tối quan trọng là cách mà bạn khai báo dữ liệu Struct trong ví dụ trên. Có hai lựa chọn cho chương trình structur.cpp. Bạn có thể đặt khai báo bên trong hàm main() và ngoài hàm. Và bạn cũng nên nhớ rằng struct chúng ta cũng có thể gọi nó là 1 kiểu dữ liệu được định nghĩa riêng. Điều này cũng có nghĩa rằng nó cũng có dạng “Biến nội bộ” v�� “Biến toàn cục”. Dựa vào vị trí đặt của Struct thì chúng ta có thể suy ra đươc biến Struct này là biến nội bộ hay biến toàn cục. Tùy vào vị trí đặt Struct thì chúng ta có cách sử  dụng khác nhau\nNotice: Trong bài này mình tạm gọi Struct là 1 biến để ngắn gọn nhé.\nBiến Struct toàn cục: là loại biến đặt bên ngoài hàm, được khai báo sau khi khai báo thư viện và namspace, loại biến này sử dụng được cho mọi hàm trong chương trình và chúng ta gọi tên tiếng anh mĩ miều là external declaration \nBiến Struct cục bộ: là loại biến được đặt bên trong hàm, được khai báo trong 1 hàm cố định và không được truy xuất bởi hàm khác, nói cách khác đó là biến chỉ sử dụng được bởi các funtion đặt chung dấu {} với nó.\n\n\nVí dụ\n\n```\nint main()\n{\n    struct ID\n    {\n        int a;\n        int b;\n    };\n}\n```\n\nNhư các bạn thấy đấy, Struct cũng được máy tính đối xử như 1 biến vậy, nó có thể được khai báo cục bộ hoặc toàn cục. Với cách khai báo toàn cục thì nó có thể được sử dụng bởi tất cả các hàm. \nQuay trở lại với ngôn ngữ C++, ngôn ngữ này không khuyến khích sử dụng biến toàn cục (external variable) nhưng nó khuyến khích sử dụng các struct extenal variable (có thể gọi là cấu trúc toàn cục).\n\nBây giờ chúng ta lại nhìn cách mình sử dụng struct bênt trên. Cách mà mình khởi tạo 1 biến:\n\n```\ninflatable guest = \n{ \n    \"Glorious Gloria\",    //namevalue\n    1.88,                //volum value\n    29.99                //price value\n};    \n```\n\nGiống như cách bạn truyền tham số vào một mảng, bạn cần để trong một dấu {} và cách nhau bởi một dấuphẩy. Mỗi giá trị được đặt trong một dòng. Tuy nhiên bạn có thể đặt tất  cả vào cùng 1 dòng mà không xảy ra lỗi. Nhưng nhớ rằng phải ngăn cách chúng bằng dấu phẩy, đó là quy tắc nếu bạn không muốn gặp lỗi khi compile bằng bất cứ complier nào.\n\n    Inflatable duck = {“daphne”, 0.12, 9.98};\n\nBạn có  thể khởi tạo mỗi  giá trị của struct bằng các kiểu dữ liệu  thích hợp. Trong ví dụ mình khái báo bên trên, biến name mình đã khai báo một mãng kiểu char, nhưng nếu sử dụng C++ thì bạn có thể khai báo  kiểu string, điều này không ảnh hưởng tới cách mà chương trình  chạy.\n\nMỗi giá trị của Struct được đối xử như là một biến của kiểu dữ liệu. Như vậy, khi ta sử dụng biến pal.price thì đây là một biến kiểu double và pal.name là một kiểu char[]. Và khi mà ta sử dụng lệnh cout để xuất dữ liệu ra màn hình với biến pal.name thì máy tính sẽ tự động chọn kiểu string (hay char[]). Cũng như thế, pal.name cũng là một mảng ký tự và chúng ta có thể sử dụng nó như là một mảng. Khi bạn truy xuất giá trị tại pal.name[0] thì bạn sẽ nhận được một giá tị ‘A’, nhưng khi bạn truy xuất pal[0] thì nó hoàn toàn vô nghĩa bởi vì pal là một struct chứ không phải là một mảng(array).\n\n---\n\nKHAI BÁO STRUCT TRONG C++ 11\n----------------------------\n\n---\n\nGiống như mảng, C++11 mở rộng cách mà ta có thể khai báo và sử dụng struct một cách linh hoạt. Thay vì chúng ta cần phải sử dụng dấu “=” thì nay chúng ta có thể quên nó đi.\n\n    Inflatable duck {“daphne”, 0.12, 9.98};\n\nTiếp theo, mỗi thành phần chưa được gán trị  thay vì nó sẽ là một giá trị rác thì nay mặc định sẽ là 0. Ví dụ, khi mà khai báo một biến có kiểu inflatable mayor thì giá trị ta nhận về khi truy xuất mayor.price hay mayor.volume sẽ  là  0.\nTuy nhiên ta có mayor.name được định nghĩa là  một  mảng ký tự thì tất cả các byte trong mảng mayor.name sẽ được đặt là 0 (hoặc  gọi cách khác đây là ký tự NULL).\nCách mà ta khai báo biến mayor để có các giá trị trên là:\n\n    Inflatable mayor{};\n\nLIỆU STRUCT CÓ THỂ SỬ DỤNG ĐƯỢC CLASS STRING KHÔNG?\n---------------------------------------------------\n\nLiệu chúng ta có thể dùng các đối tượng bên trong Class String để sử dụng cho mảng ký tự name? Tất nhiên, bạn có thể khai báo một structure giống thế này:\n\n```\nstruct inflatable\n{\n\tstd::string name;\n\tfloat volume;\n\tdouble price;\n};\n```\n\nTất nhiên câu trả lời là có thể rồi trừ khi bạn đang sử dụng một IDE hay compiler bản cũ hoặc đã lỗi thời từ lâu thì nó không được hỗ trợ khai báo structure với class string.\n\nHãy chắc chắn rằng structure bạn khai báo có quyền truy cập vào namespace std. Bạn có thể khai báo sau khi khai báo thư viện hoặc trong khi khai báo struct như cách mà mình làm bên trên, sử  dụng: std: :string\n\nMỘT SỐ THUỘC TÍNH KHÁC CỦA STRUCT\n---------------------------------\n\nC++ tạo cho người dùng một môi trường đơn giản nhất có thể để sử dụng “built-in-type”. Ví dụ,  bạn có thể  sử  dụng cấu trúc như là một đối số, và bạn có thể sử dụng structure  như một kiểu dữ liệu của hàm  và return giá trị của  structure đó. Tất nhiên bạn có thể sử dụng các operator (=)  để gán một giá trị của struct cho một biến khác cùng với kiểu đã khai báo. Ví dụ: \n       \n    char[50] palprice = pal.prices;\n\nNhư chúng ta  thấy  đấy, các “member” được khai báo trong struct cũng được đối  xử như là một variable. Bây giờ chúng ta hãy xem ví  dụ tiếp theo bên dưới\n\n```\n#include  <iostream>\nusing namespace std;\nstruct inflatable\n{\n    char name[20];\n    float volume;\n    double price;\n};\n\nint main()\n{\n    inflatable bouquet =\n    {\n        \"sunflower\",\n        0.20,\n        12.49\n    };\n    inflatable pal =\n    {\n        \"Audacious Arthur\",\n        3.12,\n        32.99\n    };\n    inflatable choice;\n    cout << \"bouquet: \" << bouquet.name << \"for $\" << bouquet.price << endl;\n    choice = bouquet;\n    cout << \"choice: \" << choice.name << \"for $\" << choice.price << endl;\n    return 0;\n}\n```\n\nVà đây là kết quả của đoạn code bên trên:\n\n> Bouquet: sunflower for $12.49\n> Choice: sunflower for $12.49\n\nNhư bạn đã thấy, cả hai giá trị của Bouquet và Choice đều bằng nhau. Bạn có thể phối hợp định nghĩa 1 cấu trúc và gán thẳng variable cho nó. Để làm được việc này, bạn khai báo thẳng variable sau khi khai báo một struct\n\n```\ntruct perks\n{\n    int key_number;\n    char car[12];\n} mr_smith, ms_jones;\n```\n\nMặc dù cách này vẫn giúp chương trình hoạt động bình thường, tuy nhiên các lập trình viên đều chia ra vì viết giống vậy rất khó để theo dõi chương trình và sửa lỗi.\n\nMột cách khác là bạn có thể tạo dựng 1 struct không tên và gọi một variable sau khi đã định nghĩa xong struct. Như ví dụ dưới đây:\n\n```\nstruct perks\n{\n    int key_number;\n    char car[12];\n} mr_glitz =\n{\n    7,\n    \"Packard\"\n};\n```\n\nTrong đoạn code này:\n\n```\nstruct\n{\n    int x;\n    int y;\n} position;\n```\n\nChương trình sẽ tạo dựng một biến struct và gọi nó là position. Bạn có thể truy xuất các “member” của position bằng “membership operation”, ví dụ như là  position.x, nhưng nếu bạn sử  dụng cách khai báo này thì bạn sẽ chỉ có duy nhất một biên postion có thể sử dụng struct này. Và sau đó bạn không thể tạo một biến khác có thể sử dụng chung struct như thế. Nói cách khác, biến position là đặc biệt.\n\nMẢNG STRUCT\n-----------\n\nTrong struct inflatable được định nghĩa ở đầu  bàu có chứa một mảng (char name[]). Nó cũng có khả năng tạo mảng mà  các phần tử là struct. Kỹ thuật để tạo nên một mảng kiểu struct chính là cách mà ta hay sử dụng để tạo 1 mảng của 1 kiểu dữ liệu nào đó.\n\n```\nInflatable gifts[100]; // array of 100  inflatable structures\n```\n\nĐây là dòng lệnh để tạo ra một mảng có 100 phần tử kiểu > `inflatable`. Vì thế mỗi phần tử trong mảng từ `gifts[0]` tới `gifts[99]` đều  có kiểu của `struct inflatable`:\n\n    cin >> gifts[0].volume; // use volume member  of  first struct\n    cout << gifts[99].price  << endl; // display price member if last struct\n\nNhưng hãy nhớ rằng gifts là tên của mảng chứ không phải là variable, việc truy xuất gift.price sẽ vô nghĩa và bạn sẽ nhanh chóng bị báo lỗi bởi compiler.\nĐể khai báo một mảng struct, ta cũng  có thể ghép chúng lại bằng cách bên dưới:\n\n```\nInflatable guests[2] =        // khai báo mảng kiểu struct\n{\n    {“Bambi”, 0.5, 21.99},        //giá trị đầu tiên của mảng\n    {“Godzilla”, 2000, 565.99}    //giá trị tiếp theo\n}\n```\n\nNhư cách mọi người thường dùng, bạn có thể định nghĩa bằng cách bạn thích. Ví dụ, cả hai cách định nghĩa có thể đặt ở chung 1 dòng hay tách từng dòng để dễ đọc.\n\nVí dụ tiếp theo sẽ hướng dẫn cách mà bạn sẽ sử dụng và truy xuất dữ liệu sử dụng dấu chấm “.” (dot operation)\n\n```\n#include <iostream>\nstruct inflatable\n{\n    char name[20];\n    float volume;\n    double price;\n};\nint main()\n{\n    using namespace  std;\n    inflatable  guests[2] =\n    {\n        {\"Bambi, 0.5, 21.99\"},\n        {\"Godzilla, 2000, 565.99\"}\n    };\n    cout << \"The guests\" << guests[0].name << \" and \" << guests[1].name;\n    cout << \"\\n Have a  combined volume of \" << guests[0].volume + guests[1].volume << \" 2000.5 cubic feet.\\n\";\n    return 0;\n}\n```\n\nVà đây là kết quả sau khi chương trình chạy:\n\n> The guests Bambi and Godzilla\n> Have a  combined volume of 2000.5 cubic feet.\n\nBIT FIELDS TRONG STRUCT\n-----------------------\n\nC++ cũng như C cho phép bạn chỉ định  số lượng bit mà bạn muốn sử dụng. Điều này thực sự hữu dụng khi bạn tạo một data structure, bạn có thể chỉ định bạn cần bao nhiêu bộ nhớ. Vùng Fields này nên là một biến hoặc một kiểu dữ liệu ta không dùng tới. Ví dụ sau:\n\n```\nStruct torgle_register\n{\n    Unsigned in SN : 4;    // dùng 4 bit cho giá trị SN;\n    Unsigned  int : 4;    // 4 bit này không dùng tới\n    Bool goodIn :  1;    // valid input (1 bit)\n    Bool goodTorgle : 1    // successful torgling\n};\n```\n\nBạn có thể định nghĩa fields cực kỳ linh hoạt, và bạn có thể sử dụng ký hiệu để truy cập các byte field:\n\n```\nTorge_register tr = {14, true, false};\n…\nIf(tr.goodIn)\n…\n```\n\nBit Fields thường được sử dụng trong lập trình cấp thấp cho các vi xử lý. Tuy nhiên bạn có thể sử dụng nó như là 1 flag để đánh dấu khi sử  dụng pointer.\n\nUNIONS\n------\n\nUnion là một kiểu dữ liệu cũng  khá giống struct về cách định nghĩa cùng như cách sử dụng. Nhưng nó khác Struct tại một thời điểm nó chỉ lưu được một giá trị duy nhất.\nQuay trở lại các ví  dụ trước, ta có 1 struct tên `Inflatable` có chứa nhiều kiểu dữ liệu bên trong. Ta có gọi một “biến” với tên `pal` và ta  truy xuất dữ liệu theo `pal.name, pal.prices….` và dữ liệu được truy xuất được lưu vào các biến của `pal.name, pal.prices…`\n\n**Vậy  Union lưu dữ liệu  thế  nào?**\nUnion chỉ lưu 1 dữ liệu tại một thời  điểm. Để hiểu rõ hơn thì bạn hãy xem ví dụ bên dưới đây về union:\n\n```\nUnion one4all\n{\n    Int int_val;\n    Long  long_val;\n    Double double_val;\n};\n```\n\nNhìn sơ lược bạn có thể thấy rằng union one4all chỉ có thể lưu giữ 3 kiểu dữ liệu là interger, long và double. Và chúng ta hãy tiếp tục những dòng code tiếp theo:\n\n```\none4all pail;\npail.int_val = 15;\nCout << pail.int_val << endl;\npail.double_val =  1.38;\ncout << pail.double_val << endl;\ncout << pail.int_val << endl;\n```\n\nNhư chúng ta  thấy, pail chỉ lưu giá trị int tại 1 thời điểm và tại một thời điểm khác (`pail.double_val`) thì giá trị cuả int sẽ bị mất. Biến sẽ chỉ lưu trữ giá trị tại thời điểm nó được gọi. Bởi vì union chỉ lưu trữ một giá trị tại một thời  điểm, nó không có đủ bộ nhớ để giữ những giá trị khác. Vì thế, kích thước bộ nhớ của Union là kích thước của biến có kiểu dữ liệu lớn nhất.\n\nMục đích của việc sử dụng union là để tiết kiệm bộ nhớ khi mà dữ liệu đầu vào có thể  có  nhiều định dạng nhưng không bao giờ được sử dụng đồng thời. Ví dụ, giar sử bạn đang quản lý một “hỗn tạp” các kiểu dữ liệu, một vài thứ trong đó nên sử dụng int ID, một số khác thì dùng string ID, một khác  nữa là double, bla  bla bla. Nếu bạn sử  dụng các khai báo biến bình thường  thì bạn cần khai báo rất nhiều biến và rất nhiều kiểu dữ liệu. Tuy nhiên với union bạn có thể làm theo cách bên dưới đây:\n\n```\n#include <iostream>\nusing namespace std;\nstruct widget\n{\n    char brand[20];\n    int type;\n    union ID\n    {\n        long id_num;\n        char id_char[20];\n    } id_val;\n};\nint main()\n{\n    widget prize;\n    if (prize.type == 1)\n    {\n        cin >> prize.id_val.id_num;\n    }\n    else\n    {\n        cin >> prize.id_val.id_char;\n    }\n}\n```\n\nAnonymous union không có tên; bản chất đó là nhiều biến nhưng được lưu vào một vùng nhớ nhất định:\n\n```\nunion ID\n{\n    long id_num;\n    char id_char[20];\n} id_val;\n```\n\nBởi vì union là Anonymous, các biến id_num và id_char được đối xử như hai “biến con” của prize và được lưu trong 1 vùng nhớ nhất định. Nó  chỉ cần một cái tên trung gian để truy  xuất vào vùng nhớ đó (là id_num hay id_char) tùy thuộc vào lập trình viên chọn cái nào để sử dụng.\nUnion thường được  sử dụng để tiết kiệm bộ nhớ.  Nó có vẻ không cần thiết khi mà bộ nhớ RAM ngày nay  thực sự lớn và lên tới hàng gigabyte và hàng terabytes cho  ổ đĩa. Nhưng không dừng lại ở đó, hằng ngày có rất nhiều lập trình viên đang sử dụng union như cứu cánh trong lĩnh vực hệ thống nhúng, nơi mà bộ nhớ và cả ram bị giới hạn rất là nhiều.\n\n\n  [1]: http://daynhauhoc.com/t/de-quy-dich-boi-breakdown/5719\n","__filename":"posts/7092.md","__url":"/struct-la-gi-ban-chat-va-cach-su-dung/","__resourceUrl":"/struct-la-gi-ban-chat-va-cach-su-dung/index.html","__dataUrl":"/struct-la-gi-ban-chat-va-cach-su-dung/index.html.5acf1eae230745571acfffdbfeebd33e.json"}
{"head":{"id":11228,"layout":"Post","route":"nhung-kinh-nghiem-voi-lap-trinh-android-phan-i","title":"Những kinh nghiệm với lập trình Android - Phần I","tags":["android"],"date":"2015-08-17T07:32:43.343Z","author":{"username":"GDGHN_AndroidTeam","avatar":"/user_avatar/daynhauhoc.com/gdghn_androidteam/{size}/3567_1.png"},"description":"Tóm tắt\n\n[Có một vài topic như thế này][1] khiến mình rất bối rối không biết phải trả lời như thế nào cho hợp lí. Vậy nên lập thêm một topic…"},"body":"<h2 id=\"tm-tt\"><a href=\"#tm-tt\" class=\"statinamic-HeadingAnchor\">#</a>Tóm tắt</h2>\n<p><a href=\"http://daynhauhoc.com/t/can-tai-lieu-phan-giao-dien-android/11099/7\">Có một vài topic như thế này</a> khiến mình rất bối rối không biết phải trả lời như thế nào cho hợp lí. Vậy nên lập thêm một topic mới chia sẻ kinh nghiệm chung nhất của mình về lập trình Android. Đây là những kinh nghiệm khi mình thực hiện maintain lại một dự án trong hai năm và làm một vài dự án nhỏ nữa nên không chắc là những kinh nghiệm tốt nhất. Tuy nhiên vẫn hi vọng chúng có ích</p>\n<h2 id=\"cu-trc-th-mc-cho-code-android\"><a href=\"#cu-trc-th-mc-cho-code-android\" class=\"statinamic-HeadingAnchor\">#</a>Cấu trúc thư mục cho code Android</h2>\n<p>Mục này mình có tham khảo ở nhiều nguồn để ghép vào phần dự án mình đang làm. Theo mình thấy thì dự án chia cây thư mục như sau sẽ rõ ràng hơn các cách chia khác.</p>\n<pre><code>Android_structure\n├─ gdg.lbs\n│  ├─ activities\n│  ├─ adapters\n│  ├─ fragments\n│  ├─ example\n│  ├─ interfaces\n│  ├─ models\n│  ├─ navigates\n│  ├─ networks\n│  ├─ notifications\n│  ├─ utils\n│  └─ views\n</code></pre>\n<p>Trong đó mỗi một thành phần sẽ có một ý nghĩa riêng như sau:</p>\n<blockquote>\n<p><strong>gdg</strong>: Tên công ty (đồng thời nằm trong root package name)<br>\n<strong>lbs</strong>: Viết tắt của Lương Sơn Bạc là tên của team<br>\n<strong>activities</strong>: Các activity sẽ được đưa vào đây.<br>\n<strong>adapters</strong>: Dành cho các custom adapter.<br>\n<strong>fragments</strong>: Toàn bộ các fragment<br>\n<strong>example</strong>: Tên của project. Trong này sẽ chứa tất cả những gì liên quan tới project bao gồm file Config.java, Application.java...<br>\n<strong>interfaces</strong>: Khai báo các interface được dùng trong dự án<br>\n<strong>models</strong>: Làm việc với preference, làm việc với SQLlite<br>\n<strong>navigates</strong>: Các phương thức điều khiển vào ra của fragment sẽ được đưa vào đây.<br>\n<strong>networks</strong>: Picaso. Volley, OKHttp sẽ được đưa vào đây.<br>\n<strong>notifications</strong>: Tất cả mọi hoạt động liên quan đến notification, GCM.<br>\n<strong>utils</strong>: Các lớp hỗ trợ trọng quá trình sử dụng như StorageUtil.java, ImageUtil.java...<br>\n<strong>views</strong>: Khai báo các custom view</p>\n</blockquote>\n<p>Ngoài những thư mục (package) kể trên thì mình còn sử dụng thêm một vài package nữa tuy nhiên không phổ biến lắm nên mình không có liệt kê tại đây.</p>\n<h2 id=\"s-dng-debuglogjava-thay-v-logjava\"><a href=\"#s-dng-debuglogjava-thay-v-logjava\" class=\"statinamic-HeadingAnchor\">#</a>Sử dụng DebugLog.java thay vì Log.java</h2>\n<p>Thông thường khi muốn viêt lại log để hỗ trợ việc debug android được tốt hơn, các bạn sẽ sử dụng lớp được cũng cấp sẵn là <code>Log.i(String, String);</code>. Tuy nhiên vấn đề bạn đang gặp phải là những đoạn log này chỉ hữu ích với việc debug mà thôi. Khi sản phẩm được tung ra thị trường thì những đoạn log này vô tình lại đang làm hại chính các bạn. Vậy trong trường hợp này ta phải làm sao? <strong>Chẳng lẽ lại tìm từng chỗ viết log rồi xóa tay trước khi build?</strong></p>\n<p>Một gợi ý nhỏ đó là chúng ta sẽ sử dụng một biến static có tên là <code>IS_DEBUG</code> như sau:</p>\n<pre><code>if (Config.IS_DEBUG) {\n    Log.i(String, String);\n}\n</code></pre>\n<p>Cũng khá ổn rồi nhưng mà bây giờ mỗi lần sử dụng <strong>chẳng lẽ lại viết đi viết lại mất công quá</strong>. Chưa kể là thành viên mới vào team có khi còn quên việc phải sử dụng code như vậy nữa. Vậy nên chăng ta nên sử dụng một lớp là <code>DebugLog.java</code> như sau:</p>\n<pre><code>public class DebugLog {\n    public static void i(String tag, String msg) {\n        if (Config.IS_DEBUG) {\n            Log.i(tag, msg);\n        }\n    }\n}\n</code></pre>\n<p>Tốt rồi, code đã trở nên sáng sủa hơn nhiều.Thế nhưng có một vấn đề nhỏ với DebugLog.</p>\n<pre><code>DebugLog.i(TAG, &quot;String: &quot; + numberOfString);\n</code></pre>\n<p>Đoạn code trên tưởng chừng như vô hai nhưng lại khiến cho ta tốn thêm 4 bước thuật toán cộng chuỗi trong khi chuỗi mới chẳng được sử dụng nếu cờ <code>IS_DEBUG</code> được đặt bằng <code>false</code>. <strong>Vậy cách giải quyết ở đây là gì nhỉ?</strong><br>\nChẳng có cách nào để khắc phục việc này đâu. Hãy coi đây là một cái giá phải trả cho việc quản lí dễ dàng hơn.</p>\n<h2 id=\"lu-mt-khu-signing-key-vo-file-gradleproperties\"><a href=\"#lu-mt-khu-signing-key-vo-file-gradleproperties\" class=\"statinamic-HeadingAnchor\">#</a>Lưu mật khẩu signing key vào file <code>gradle.properties</code></h2>\n<p>Nếu có bạn nào tìm hiểu sâu đến grade thì đều biết đây là một nền tảng hỗ trợ việc build tự động theo kịch bản. Thông thường khi release, bạn sẽ tạo ra một kịch bản build như sau:</p>\n<pre><code>signingConfigs {\n    release {\n        storeFile file(&quot;release.keystore&quot;)\n        storePassword &quot;storepassword&quot;\n        keyAlias &quot;myproject&quot;\n        keyPassword &quot;keypassword&quot;\n    }\n}\n</code></pre>\n<p>Sau đó bạn đẩy file này lên version control như GIT hoặc SVN. Tình cờ thế nào ai đó có quyền truy cập vào version control của bạn. Và bạn mất đi signing key, một trong những chìa khóa cốt lõi cho file apk của bạn trên GooglePlay.<br>\nMột giải pháp cho vấn đề này là chúng ta sẽ sử dụng file <code>gradle.properties</code> như sau:</p>\n<pre><code>KEYSTORE_PASSWORD=storepassword\nKEY_PASSWORD=keypassword\n</code></pre>\n<p>Và thay vì viết một kịch bản như trên, bạn có cách viết lại khác hơn nhiều:</p>\n<pre><code>signingConfigs {\n    release {\n        try {\n            storeFile file(&quot;release.keystore&quot;)\n            storePassword KEYSTORE_PASSWORD\n            keyAlias &quot;myproject&quot;\n            keyPassword KEY_PASSWORD\n        }\n        catch (ex) {\n            throw new InvalidUserDataException(&quot;You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.&quot;)\n        }\n    }\n}\n</code></pre>\n<p>Lúc này, chúng ta chỉ cần pull kịch bản lên version control và giữ lại password cho riêng mình.</p>\n","rawBody":"\nTóm tắt\n---\n[Có một vài topic như thế này][1] khiến mình rất bối rối không biết phải trả lời như thế nào cho hợp lí. Vậy nên lập thêm một topic mới chia sẻ kinh nghiệm chung nhất của mình về lập trình Android. Đây là những kinh nghiệm khi mình thực hiện maintain lại một dự án trong hai năm và làm một vài dự án nhỏ nữa nên không chắc là những kinh nghiệm tốt nhất. Tuy nhiên vẫn hi vọng chúng có ích\n  [1]: http://daynhauhoc.com/t/can-tai-lieu-phan-giao-dien-android/11099/7\n\nCấu trúc thư mục cho code Android\n---\nMục này mình có tham khảo ở nhiều nguồn để ghép vào phần dự án mình đang làm. Theo mình thấy thì dự án chia cây thư mục như sau sẽ rõ ràng hơn các cách chia khác.\n\n```\nAndroid_structure\n├─ gdg.lbs\n│  ├─ activities\n│  ├─ adapters\n│  ├─ fragments\n│  ├─ example\n│  ├─ interfaces\n│  ├─ models\n│  ├─ navigates\n│  ├─ networks\n│  ├─ notifications\n│  ├─ utils\n│  └─ views\n```\nTrong đó mỗi một thành phần sẽ có một ý nghĩa riêng như sau:\n>**gdg**: Tên công ty (đồng thời nằm trong root package name)\n**lbs**: Viết tắt của Lương Sơn Bạc là tên của team\n**activities**: Các activity sẽ được đưa vào đây.\n**adapters**: Dành cho các custom adapter.\n**fragments**: Toàn bộ các fragment\n**example**: Tên của project. Trong này sẽ chứa tất cả những gì liên quan tới project bao gồm file Config.java, Application.java...\n**interfaces**: Khai báo các interface được dùng trong dự án\n**models**: Làm việc với preference, làm việc với SQLlite\n**navigates**: Các phương thức điều khiển vào ra của fragment sẽ được đưa vào đây.\n**networks**: Picaso. Volley, OKHttp sẽ được đưa vào đây.\n**notifications**: Tất cả mọi hoạt động liên quan đến notification, GCM.\n**utils**: Các lớp hỗ trợ trọng quá trình sử dụng như StorageUtil.java, ImageUtil.java...\n**views**: Khai báo các custom view\n\nNgoài những thư mục (package) kể trên thì mình còn sử dụng thêm một vài package nữa tuy nhiên không phổ biến lắm nên mình không có liệt kê tại đây.\n\nSử dụng DebugLog.java thay vì Log.java\n---\nThông thường khi muốn viêt lại log để hỗ trợ việc debug android được tốt hơn, các bạn sẽ sử dụng lớp được cũng cấp sẵn là `Log.i(String, String);`. Tuy nhiên vấn đề bạn đang gặp phải là những đoạn log này chỉ hữu ích với việc debug mà thôi. Khi sản phẩm được tung ra thị trường thì những đoạn log này vô tình lại đang làm hại chính các bạn. Vậy trong trường hợp này ta phải làm sao? **Chẳng lẽ lại tìm từng chỗ viết log rồi xóa tay trước khi build?**\n\nMột gợi ý nhỏ đó là chúng ta sẽ sử dụng một biến static có tên là `IS_DEBUG` như sau:\n```\nif (Config.IS_DEBUG) {\n    Log.i(String, String);\n}\n```\nCũng khá ổn rồi nhưng mà bây giờ mỗi lần sử dụng **chẳng lẽ lại viết đi viết lại mất công quá**. Chưa kể là thành viên mới vào team có khi còn quên việc phải sử dụng code như vậy nữa. Vậy nên chăng ta nên sử dụng một lớp là `DebugLog.java` như sau:\n```\npublic class DebugLog {\n    public static void i(String tag, String msg) {\n        if (Config.IS_DEBUG) {\n            Log.i(tag, msg);\n        }\n    }\n}\n```\nTốt rồi, code đã trở nên sáng sủa hơn nhiều.Thế nhưng có một vấn đề nhỏ với DebugLog.\n```\nDebugLog.i(TAG, \"String: \" + numberOfString);\n```\nĐoạn code trên tưởng chừng như vô hai nhưng lại khiến cho ta tốn thêm 4 bước thuật toán cộng chuỗi trong khi chuỗi mới chẳng được sử dụng nếu cờ `IS_DEBUG` được đặt bằng `false`. **Vậy cách giải quyết ở đây là gì nhỉ?**\nChẳng có cách nào để khắc phục việc này đâu. Hãy coi đây là một cái giá phải trả cho việc quản lí dễ dàng hơn.\n\nLưu mật khẩu signing key vào file `gradle.properties`\n---\nNếu có bạn nào tìm hiểu sâu đến grade thì đều biết đây là một nền tảng hỗ trợ việc build tự động theo kịch bản. Thông thường khi release, bạn sẽ tạo ra một kịch bản build như sau:\n```\nsigningConfigs {\n    release {\n        storeFile file(\"release.keystore\")\n        storePassword \"storepassword\"\n        keyAlias \"myproject\"\n        keyPassword \"keypassword\"\n    }\n}\n```\nSau đó bạn đẩy file này lên version control như GIT hoặc SVN. Tình cờ thế nào ai đó có quyền truy cập vào version control của bạn. Và bạn mất đi signing key, một trong những chìa khóa cốt lõi cho file apk của bạn trên GooglePlay.\nMột giải pháp cho vấn đề này là chúng ta sẽ sử dụng file `gradle.properties` như sau:\n```\nKEYSTORE_PASSWORD=storepassword\nKEY_PASSWORD=keypassword\n```\nVà thay vì viết một kịch bản như trên, bạn có cách viết lại khác hơn nhiều:\n```\nsigningConfigs {\n    release {\n        try {\n            storeFile file(\"release.keystore\")\n            storePassword KEYSTORE_PASSWORD\n            keyAlias \"myproject\"\n            keyPassword KEY_PASSWORD\n        }\n        catch (ex) {\n            throw new InvalidUserDataException(\"You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.\")\n        }\n    }\n}\n```\nLúc này, chúng ta chỉ cần pull kịch bản lên version control và giữ lại password cho riêng mình.\n","raw":"---json\n{\"id\":11228,\"layout\":\"Post\",\"route\":\"nhung-kinh-nghiem-voi-lap-trinh-android-phan-i\",\"title\":\"Những kinh nghiệm với lập trình Android - Phần I\",\"tags\":[\"android\"],\"date\":\"2015-08-17T07:32:43.343Z\",\"author\":{\"username\":\"GDGHN_AndroidTeam\",\"avatar\":\"/user_avatar/daynhauhoc.com/gdghn_androidteam/{size}/3567_1.png\"}}\n---\n\nTóm tắt\n---\n[Có một vài topic như thế này][1] khiến mình rất bối rối không biết phải trả lời như thế nào cho hợp lí. Vậy nên lập thêm một topic mới chia sẻ kinh nghiệm chung nhất của mình về lập trình Android. Đây là những kinh nghiệm khi mình thực hiện maintain lại một dự án trong hai năm và làm một vài dự án nhỏ nữa nên không chắc là những kinh nghiệm tốt nhất. Tuy nhiên vẫn hi vọng chúng có ích\n  [1]: http://daynhauhoc.com/t/can-tai-lieu-phan-giao-dien-android/11099/7\n\nCấu trúc thư mục cho code Android\n---\nMục này mình có tham khảo ở nhiều nguồn để ghép vào phần dự án mình đang làm. Theo mình thấy thì dự án chia cây thư mục như sau sẽ rõ ràng hơn các cách chia khác.\n\n```\nAndroid_structure\n├─ gdg.lbs\n│  ├─ activities\n│  ├─ adapters\n│  ├─ fragments\n│  ├─ example\n│  ├─ interfaces\n│  ├─ models\n│  ├─ navigates\n│  ├─ networks\n│  ├─ notifications\n│  ├─ utils\n│  └─ views\n```\nTrong đó mỗi một thành phần sẽ có một ý nghĩa riêng như sau:\n>**gdg**: Tên công ty (đồng thời nằm trong root package name)\n**lbs**: Viết tắt của Lương Sơn Bạc là tên của team\n**activities**: Các activity sẽ được đưa vào đây.\n**adapters**: Dành cho các custom adapter.\n**fragments**: Toàn bộ các fragment\n**example**: Tên của project. Trong này sẽ chứa tất cả những gì liên quan tới project bao gồm file Config.java, Application.java...\n**interfaces**: Khai báo các interface được dùng trong dự án\n**models**: Làm việc với preference, làm việc với SQLlite\n**navigates**: Các phương thức điều khiển vào ra của fragment sẽ được đưa vào đây.\n**networks**: Picaso. Volley, OKHttp sẽ được đưa vào đây.\n**notifications**: Tất cả mọi hoạt động liên quan đến notification, GCM.\n**utils**: Các lớp hỗ trợ trọng quá trình sử dụng như StorageUtil.java, ImageUtil.java...\n**views**: Khai báo các custom view\n\nNgoài những thư mục (package) kể trên thì mình còn sử dụng thêm một vài package nữa tuy nhiên không phổ biến lắm nên mình không có liệt kê tại đây.\n\nSử dụng DebugLog.java thay vì Log.java\n---\nThông thường khi muốn viêt lại log để hỗ trợ việc debug android được tốt hơn, các bạn sẽ sử dụng lớp được cũng cấp sẵn là `Log.i(String, String);`. Tuy nhiên vấn đề bạn đang gặp phải là những đoạn log này chỉ hữu ích với việc debug mà thôi. Khi sản phẩm được tung ra thị trường thì những đoạn log này vô tình lại đang làm hại chính các bạn. Vậy trong trường hợp này ta phải làm sao? **Chẳng lẽ lại tìm từng chỗ viết log rồi xóa tay trước khi build?**\n\nMột gợi ý nhỏ đó là chúng ta sẽ sử dụng một biến static có tên là `IS_DEBUG` như sau:\n```\nif (Config.IS_DEBUG) {\n    Log.i(String, String);\n}\n```\nCũng khá ổn rồi nhưng mà bây giờ mỗi lần sử dụng **chẳng lẽ lại viết đi viết lại mất công quá**. Chưa kể là thành viên mới vào team có khi còn quên việc phải sử dụng code như vậy nữa. Vậy nên chăng ta nên sử dụng một lớp là `DebugLog.java` như sau:\n```\npublic class DebugLog {\n    public static void i(String tag, String msg) {\n        if (Config.IS_DEBUG) {\n            Log.i(tag, msg);\n        }\n    }\n}\n```\nTốt rồi, code đã trở nên sáng sủa hơn nhiều.Thế nhưng có một vấn đề nhỏ với DebugLog.\n```\nDebugLog.i(TAG, \"String: \" + numberOfString);\n```\nĐoạn code trên tưởng chừng như vô hai nhưng lại khiến cho ta tốn thêm 4 bước thuật toán cộng chuỗi trong khi chuỗi mới chẳng được sử dụng nếu cờ `IS_DEBUG` được đặt bằng `false`. **Vậy cách giải quyết ở đây là gì nhỉ?**\nChẳng có cách nào để khắc phục việc này đâu. Hãy coi đây là một cái giá phải trả cho việc quản lí dễ dàng hơn.\n\nLưu mật khẩu signing key vào file `gradle.properties`\n---\nNếu có bạn nào tìm hiểu sâu đến grade thì đều biết đây là một nền tảng hỗ trợ việc build tự động theo kịch bản. Thông thường khi release, bạn sẽ tạo ra một kịch bản build như sau:\n```\nsigningConfigs {\n    release {\n        storeFile file(\"release.keystore\")\n        storePassword \"storepassword\"\n        keyAlias \"myproject\"\n        keyPassword \"keypassword\"\n    }\n}\n```\nSau đó bạn đẩy file này lên version control như GIT hoặc SVN. Tình cờ thế nào ai đó có quyền truy cập vào version control của bạn. Và bạn mất đi signing key, một trong những chìa khóa cốt lõi cho file apk của bạn trên GooglePlay.\nMột giải pháp cho vấn đề này là chúng ta sẽ sử dụng file `gradle.properties` như sau:\n```\nKEYSTORE_PASSWORD=storepassword\nKEY_PASSWORD=keypassword\n```\nVà thay vì viết một kịch bản như trên, bạn có cách viết lại khác hơn nhiều:\n```\nsigningConfigs {\n    release {\n        try {\n            storeFile file(\"release.keystore\")\n            storePassword KEYSTORE_PASSWORD\n            keyAlias \"myproject\"\n            keyPassword KEY_PASSWORD\n        }\n        catch (ex) {\n            throw new InvalidUserDataException(\"You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.\")\n        }\n    }\n}\n```\nLúc này, chúng ta chỉ cần pull kịch bản lên version control và giữ lại password cho riêng mình.\n","__filename":"posts/11228.md","__url":"/nhung-kinh-nghiem-voi-lap-trinh-android-phan-i/","__resourceUrl":"/nhung-kinh-nghiem-voi-lap-trinh-android-phan-i/index.html","__dataUrl":"/nhung-kinh-nghiem-voi-lap-trinh-android-phan-i/index.html.6d8a9624dc116d4031a0de65d64b608e.json"}
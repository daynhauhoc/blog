{"head":{"id":3793,"layout":"Post","route":"wiki-algorithm-sang-nguyen-to-va-mot-so-ung-dung","title":"[Wiki] [Algorithm] Sàng nguyên tố và một số ứng dụng","tags":["wiki","algorithm","python","c++"],"date":"2015-02-08T03:06:06.317Z","views":705,"likes":8,"description":"Hôm nay chúng ta sẽ tìm hiểu sàng nguyên tố Sieve of Eratosthenes\n\n\nĐPT O(nloglogn)\n\n\nTư tưởng: Đánh dấu tất cả các số là bội của số nguyên…","author":{"name":"Gió","avatar":"/user_avatar/daynhauhoc.com/gio/{size}/577_1.png","username":"Gio"}},"body":"\n<h3>Hôm nay chúng ta sẽ tìm hiểu sàng nguyên tố <a href=\"http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\">Sieve of Eratosthenes</a>\n</h3>\n\n<h4>ĐPT O(nloglogn)</h4>\n\n<h4>\n<em>Tư tưởng</em>: Đánh dấu tất cả các số là bội của số nguyên tố p từ p^2 -&gt;n</h4>\n\n<h3><em>code python</em></h3>\n\n<p></p><pre><code class=\"lang-python\">def sieve(n):\n    ''' sàng nguyên tố [0,n] '''\n    \n    danh_dau=[True]*(n+1) # giả sự lúc đầu đều có thể là snt\n    \n    can_n=int(n**0.5)+1 # = floor(sqrt(n))+1\n    \n    for i in range(2,can_n+1): # i= 2-&gt;can_n\n        if danh_dau[i]: # i là số nguyên tố\n            \n            for j in range(i*i,n+1,i): # j=i*i, i*i+i , ...,n\n                danh_dau[j]=False ## j khong là số nguyên tố\n    \n    \n    primes=[]\n    for i in range(2,n+1): #i= 2-&gt;n\n        if danh_dau[i]: primes.append(i) #liệt kê lại số nguyên tố vào mảng mới\n    return primes\n\nprint sieve(100)\n\"\"\"\n#output:\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\"\"\"</code></pre>\n\n<hr>\n\n<h3>ứng dụng phân tích ra thừa số ngyên tố:</h3>\n\n<h4>nếu thay mảng dánh dấu không phải là [True|False] mà là mảng đánh dấu số nguyên tố trước đó</h4>\n\n<p></p><pre><code class=\"lang-python\">def gen_sieve_table(n):\n    \n    ''' sàng nguyên tố [0,n] '''\n    \n    danh_dau=[0]*(n+1) # giả sự lúc đầu đều có thể là snt\n    \n    can_n=int(n**0.5)+1 # = ceil(sqrt(n))+1\n    \n    for i in range(2,can_n+1): # i= 2-&gt;can_n\n        if danh_dau[i]==0: # i là số nguyên tố -&gt; giá trị =0 [không có ước nguyên tố nhỏ hơn #1]\n            \n            for j in range(i*i,n+1,i): # j=i*i, i*i+i , ...,n\n                danh_dau[j]=i ## j khong là số nguyên tố\n    \n    \n    return danh_dau\n    \n\ndef factor(n,sieve_table):\n    if sieve_table[n]==0: ## là số nguyên tố trả lại ước là chính nó\n        return [n] \n    else:\n        d=sieve_table[n]  ## chứa 1 ước nguyên tố nhỏ nhất là d\n        return [d] + factor(n//d,sieve_table)\n\nsieve_table=gen_sieve_table(100000)\n\nprint factor(12345,sieve_table)</code></pre>\n\n<p></p><pre><code class=\"lang-python\">output:\n[5, 3, 823]</code></pre>\n\n<h4>C code</h4>\n\n<p></p><pre><code class=\"lang-auto\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n#define maxn 1000000\n\nint a[maxn+1];\nint primes[maxn],primes_len;\nvoid sieve(){\n    int i,j;\n    memset(a,sizeof(int)*(maxn+1),0);\n    for(i=2;i*i&lt;=maxn;++i){\n        if(a[i]) continue; //i la hop so\n        for(j=i*i; j&lt;=maxn;j+=i){ // cac so la boi cua i tu i*i -&gt;n\n            a[j]=i;  // cai nay luu lai so nguyen to nho nhat ma j chia het cho i\n        }\n    }\n    /// liet ke lai so nguyen to\n    \n    primes[0]=2;\n    primes_len=1;\n    for(i=3;i&lt;=maxn;i+=2){\n        if(a[i]) continue;\n        primes[primes_len]=i;\n        primes_len++;\n    }\n    \n}\n\nint ft[50],fn;\n\nvoid recrusive_factor(int n){\n    if(!a[n]){\n        ft[fn]=n;\n        fn++;\n    }else{\n        recrusive_factor(n/a[n]);\n        ft[fn]=a[n];\n        ++fn;\n        \n    }\n}\n\nvoid factor(int n){\n    fn=0;\n    recrusive_factor(n);\n}\n\nint main() {\n    \n    sieve();\n    \n    printf(\"so luong so nguyen to &lt;= (%d) = %d\\n\",maxn,primes_len);\n    int n=12345;\n    printf(\"phan tich thua so nguyen to %d=\",n);\n    factor(n);\n    int i;\n    \n    for(i=0;i&lt;fn-1;++i){\n        printf(\"%d*\",ft[i]);\n    }\n    printf(\"%d\\n\",ft[fn-1]);\n    return 0;\n}</code></pre>\n\n<p></p><pre><code class=\"lang-python\">output:\nso luong so nguyen to &lt;= (1000000) = 78498\nphan tich thua so nguyen to 12345=823*3*5</code></pre>\n","rawBody":"\n<h3>Hôm nay chúng ta sẽ tìm hiểu sàng nguyên tố <a href=\"http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\">Sieve of Eratosthenes</a>\n</h3>\n\n<h4>ĐPT O(nloglogn)</h4>\n\n<h4>\n<em>Tư tưởng</em>: Đánh dấu tất cả các số là bội của số nguyên tố p từ p^2 -&gt;n</h4>\n\n<h3><em>code python</em></h3>\n\n<p></p><pre><code class=\"lang-python\">def sieve(n):\n    ''' sàng nguyên tố [0,n] '''\n    \n    danh_dau=[True]*(n+1) # giả sự lúc đầu đều có thể là snt\n    \n    can_n=int(n**0.5)+1 # = floor(sqrt(n))+1\n    \n    for i in range(2,can_n+1): # i= 2-&gt;can_n\n        if danh_dau[i]: # i là số nguyên tố\n            \n            for j in range(i*i,n+1,i): # j=i*i, i*i+i , ...,n\n                danh_dau[j]=False ## j khong là số nguyên tố\n    \n    \n    primes=[]\n    for i in range(2,n+1): #i= 2-&gt;n\n        if danh_dau[i]: primes.append(i) #liệt kê lại số nguyên tố vào mảng mới\n    return primes\n\nprint sieve(100)\n\"\"\"\n#output:\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\"\"\"</code></pre>\n\n<hr>\n\n<h3>ứng dụng phân tích ra thừa số ngyên tố:</h3>\n\n<h4>nếu thay mảng dánh dấu không phải là [True|False] mà là mảng đánh dấu số nguyên tố trước đó</h4>\n\n<p></p><pre><code class=\"lang-python\">def gen_sieve_table(n):\n    \n    ''' sàng nguyên tố [0,n] '''\n    \n    danh_dau=[0]*(n+1) # giả sự lúc đầu đều có thể là snt\n    \n    can_n=int(n**0.5)+1 # = ceil(sqrt(n))+1\n    \n    for i in range(2,can_n+1): # i= 2-&gt;can_n\n        if danh_dau[i]==0: # i là số nguyên tố -&gt; giá trị =0 [không có ước nguyên tố nhỏ hơn #1]\n            \n            for j in range(i*i,n+1,i): # j=i*i, i*i+i , ...,n\n                danh_dau[j]=i ## j khong là số nguyên tố\n    \n    \n    return danh_dau\n    \n\ndef factor(n,sieve_table):\n    if sieve_table[n]==0: ## là số nguyên tố trả lại ước là chính nó\n        return [n] \n    else:\n        d=sieve_table[n]  ## chứa 1 ước nguyên tố nhỏ nhất là d\n        return [d] + factor(n//d,sieve_table)\n\nsieve_table=gen_sieve_table(100000)\n\nprint factor(12345,sieve_table)</code></pre>\n\n<p></p><pre><code class=\"lang-python\">output:\n[5, 3, 823]</code></pre>\n\n<h4>C code</h4>\n\n<p></p><pre><code class=\"lang-auto\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n#define maxn 1000000\n\nint a[maxn+1];\nint primes[maxn],primes_len;\nvoid sieve(){\n    int i,j;\n    memset(a,sizeof(int)*(maxn+1),0);\n    for(i=2;i*i&lt;=maxn;++i){\n        if(a[i]) continue; //i la hop so\n        for(j=i*i; j&lt;=maxn;j+=i){ // cac so la boi cua i tu i*i -&gt;n\n            a[j]=i;  // cai nay luu lai so nguyen to nho nhat ma j chia het cho i\n        }\n    }\n    /// liet ke lai so nguyen to\n    \n    primes[0]=2;\n    primes_len=1;\n    for(i=3;i&lt;=maxn;i+=2){\n        if(a[i]) continue;\n        primes[primes_len]=i;\n        primes_len++;\n    }\n    \n}\n\nint ft[50],fn;\n\nvoid recrusive_factor(int n){\n    if(!a[n]){\n        ft[fn]=n;\n        fn++;\n    }else{\n        recrusive_factor(n/a[n]);\n        ft[fn]=a[n];\n        ++fn;\n        \n    }\n}\n\nvoid factor(int n){\n    fn=0;\n    recrusive_factor(n);\n}\n\nint main() {\n    \n    sieve();\n    \n    printf(\"so luong so nguyen to &lt;= (%d) = %d\\n\",maxn,primes_len);\n    int n=12345;\n    printf(\"phan tich thua so nguyen to %d=\",n);\n    factor(n);\n    int i;\n    \n    for(i=0;i&lt;fn-1;++i){\n        printf(\"%d*\",ft[i]);\n    }\n    printf(\"%d\\n\",ft[fn-1]);\n    return 0;\n}</code></pre>\n\n<p></p><pre><code class=\"lang-python\">output:\nso luong so nguyen to &lt;= (1000000) = 78498\nphan tich thua so nguyen to 12345=823*3*5</code></pre>\n","raw":"---json\n{\"id\":3793,\"layout\":\"Post\",\"route\":\"wiki-algorithm-sang-nguyen-to-va-mot-so-ung-dung\",\"title\":\"[Wiki] [Algorithm] Sàng nguyên tố và một số ứng dụng\",\"tags\":[\"wiki\",\"algorithm\",\"python\",\"c++\"],\"date\":\"2015-02-08T03:06:06.317Z\",\"views\":705,\"likes\":8,\"description\":\"Hôm nay chúng ta sẽ tìm hiểu sàng nguyên tố Sieve of Eratosthenes\\n\\n\\nĐPT O(nloglogn)\\n\\n\\nTư tưởng: Đánh dấu tất cả các số là bội của số nguyên…\",\"author\":{\"name\":\"Gió\",\"avatar\":\"/user_avatar/daynhauhoc.com/gio/{size}/577_1.png\",\"username\":\"Gio\"}}\n---\n\n<h3>Hôm nay chúng ta sẽ tìm hiểu sàng nguyên tố <a href=\"http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\">Sieve of Eratosthenes</a>\n</h3>\n\n<h4>ĐPT O(nloglogn)</h4>\n\n<h4>\n<em>Tư tưởng</em>: Đánh dấu tất cả các số là bội của số nguyên tố p từ p^2 -&gt;n</h4>\n\n<h3><em>code python</em></h3>\n\n<p></p><pre><code class=\"lang-python\">def sieve(n):\n    ''' sàng nguyên tố [0,n] '''\n    \n    danh_dau=[True]*(n+1) # giả sự lúc đầu đều có thể là snt\n    \n    can_n=int(n**0.5)+1 # = floor(sqrt(n))+1\n    \n    for i in range(2,can_n+1): # i= 2-&gt;can_n\n        if danh_dau[i]: # i là số nguyên tố\n            \n            for j in range(i*i,n+1,i): # j=i*i, i*i+i , ...,n\n                danh_dau[j]=False ## j khong là số nguyên tố\n    \n    \n    primes=[]\n    for i in range(2,n+1): #i= 2-&gt;n\n        if danh_dau[i]: primes.append(i) #liệt kê lại số nguyên tố vào mảng mới\n    return primes\n\nprint sieve(100)\n\"\"\"\n#output:\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\"\"\"</code></pre>\n\n<hr>\n\n<h3>ứng dụng phân tích ra thừa số ngyên tố:</h3>\n\n<h4>nếu thay mảng dánh dấu không phải là [True|False] mà là mảng đánh dấu số nguyên tố trước đó</h4>\n\n<p></p><pre><code class=\"lang-python\">def gen_sieve_table(n):\n    \n    ''' sàng nguyên tố [0,n] '''\n    \n    danh_dau=[0]*(n+1) # giả sự lúc đầu đều có thể là snt\n    \n    can_n=int(n**0.5)+1 # = ceil(sqrt(n))+1\n    \n    for i in range(2,can_n+1): # i= 2-&gt;can_n\n        if danh_dau[i]==0: # i là số nguyên tố -&gt; giá trị =0 [không có ước nguyên tố nhỏ hơn #1]\n            \n            for j in range(i*i,n+1,i): # j=i*i, i*i+i , ...,n\n                danh_dau[j]=i ## j khong là số nguyên tố\n    \n    \n    return danh_dau\n    \n\ndef factor(n,sieve_table):\n    if sieve_table[n]==0: ## là số nguyên tố trả lại ước là chính nó\n        return [n] \n    else:\n        d=sieve_table[n]  ## chứa 1 ước nguyên tố nhỏ nhất là d\n        return [d] + factor(n//d,sieve_table)\n\nsieve_table=gen_sieve_table(100000)\n\nprint factor(12345,sieve_table)</code></pre>\n\n<p></p><pre><code class=\"lang-python\">output:\n[5, 3, 823]</code></pre>\n\n<h4>C code</h4>\n\n<p></p><pre><code class=\"lang-auto\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n#define maxn 1000000\n\nint a[maxn+1];\nint primes[maxn],primes_len;\nvoid sieve(){\n    int i,j;\n    memset(a,sizeof(int)*(maxn+1),0);\n    for(i=2;i*i&lt;=maxn;++i){\n        if(a[i]) continue; //i la hop so\n        for(j=i*i; j&lt;=maxn;j+=i){ // cac so la boi cua i tu i*i -&gt;n\n            a[j]=i;  // cai nay luu lai so nguyen to nho nhat ma j chia het cho i\n        }\n    }\n    /// liet ke lai so nguyen to\n    \n    primes[0]=2;\n    primes_len=1;\n    for(i=3;i&lt;=maxn;i+=2){\n        if(a[i]) continue;\n        primes[primes_len]=i;\n        primes_len++;\n    }\n    \n}\n\nint ft[50],fn;\n\nvoid recrusive_factor(int n){\n    if(!a[n]){\n        ft[fn]=n;\n        fn++;\n    }else{\n        recrusive_factor(n/a[n]);\n        ft[fn]=a[n];\n        ++fn;\n        \n    }\n}\n\nvoid factor(int n){\n    fn=0;\n    recrusive_factor(n);\n}\n\nint main() {\n    \n    sieve();\n    \n    printf(\"so luong so nguyen to &lt;= (%d) = %d\\n\",maxn,primes_len);\n    int n=12345;\n    printf(\"phan tich thua so nguyen to %d=\",n);\n    factor(n);\n    int i;\n    \n    for(i=0;i&lt;fn-1;++i){\n        printf(\"%d*\",ft[i]);\n    }\n    printf(\"%d\\n\",ft[fn-1]);\n    return 0;\n}</code></pre>\n\n<p></p><pre><code class=\"lang-python\">output:\nso luong so nguyen to &lt;= (1000000) = 78498\nphan tich thua so nguyen to 12345=823*3*5</code></pre>\n","__filename":"posts/3793.md","__url":"/wiki-algorithm-sang-nguyen-to-va-mot-so-ung-dung/","__resourceUrl":"/wiki-algorithm-sang-nguyen-to-va-mot-so-ung-dung/index.html","__dataUrl":"/wiki-algorithm-sang-nguyen-to-va-mot-so-ung-dung/index.html.acc00437b4a5473f71cbe4cfa4d8a7a9.json"}
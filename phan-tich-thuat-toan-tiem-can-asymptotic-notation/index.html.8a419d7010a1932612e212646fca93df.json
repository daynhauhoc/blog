{"head":{"id":6728,"layout":"Post","route":"phan-tich-thuat-toan-tiem-can-asymptotic-notation","title":"[Phân tích thuật toán] Tiệm cận (Asymptotic notation)","tags":["algorithm"],"date":"2015-04-30T15:36:15.457Z","views":765,"likes":11,"description":"Ở bài này, mình sẽ nói về độ phức tạp của một thuật toán. Do mình cũng mới nghiên cứu để viết bài này nên chưa thể hiểu rõ được, nhưng mình…","author":{"name":"nhatlonggunz","avatar":"/letter_avatar_proxy/v2/letter/n/7bcc69/{size}.png","username":"nhatlonggunz"}},"body":"\n<p>Ở bài này, mình sẽ nói về độ phức tạp của một thuật toán. Do mình cũng mới nghiên cứu để viết bài này nên chưa thể hiểu rõ được, nhưng mình sẽ cố viết một cách dễ hiểu, có thể sẽ có sai sót, mong mọi người thông cảm và góp ý. Mọi người ráng đọc vậy, hơi dài</p>\n\n<ul><li>Khi phân tích một thuật toán, một trong những vấn đề quan trọng nhất mà ta quan tâm là thời gian chạy (running time). Thời gian chạy của một thuật toán dựa trên nhiều yếu tố, ví dụ như tốc độ của máy tính, ngôn ngữ lập trình (C/C++, Python, blah blah blah, không phải tiếng Anh tiếng Miên gì nhá), compiler và blah blah blah, nói chung là nhiều yếu tố.</li></ul>\n\n<blockquote><p>=&gt; Vậy tiệm cận (Asymptotic) là một khái niệm giúp ta ước lượng được thời gian chạy (running time) của một thuật toán, thông qua <code>số chỉ thị (machine instructions)</code> hay gọi đơn giản là <code>số bước</code>.</p></blockquote>\n\n<p>Bây giờ hãy xem xét (chữ đầu là \"xờ\" nhé, chuyển thành \"sờ\" là có chuyện ngay) kỹ về <code>thời gian chạy (đây là lần cuối mình mở ngoặc và thêm chữ running time)</code>. Chúng ta phải nghĩ về 2 thứ</p>\n\n<blockquote>\n<p><strong>Ta phải xác định, với kích thước của input (dữ liệu nhập), thuật toán sẽ chạy bao lâu</strong>. Ví dụ như số bước thực hiện <strong>tối đa</strong> của <code>Binary Search</code> hay <code>Linear Search</code> tăng theo chiều dài của dãy số (mảng). Vì thế ta nghĩ về thời gian chạy của một thuật toán như là <code>một hàm về kích thước của dữ liệu nhập</code> . </p>\n<p>Ví dụ như ta có hàm <code>F(n) = 9n&lt;sup&gt;2&lt;/sup&gt; + 6n + 9</code> với n là kích thước <em>*tối đa</em> của dữ liệu nhập thì hàm F(n) chính là <code>running time</code></p>\n</blockquote>\n\n<ul>\n<li><p>Thứ 2, ta tập trung vào ý nghĩ: <strong>khi kích thước input tăng thì thì tốc độ của thuật toán sẽ tăng nhanh như thế nào</strong>. Hay như ví dụ trên: <code>Khi n (kích thước tối đa của input) tăng thì giá trị của hàm F(n) sẽ bao như thế nào (ví dụ n tăng 2 thì nguyên hàm đó tăng 4, đại loại thế)</code>. Và chúng ta gọi nó là <code>Tỷ suất gia tăng</code>, hay gọi cho đơn giản là <code>rate of grow</code> (mọi người luyện tiếng Anh chút vậy).</p></li>\n<li><p>Để dễ quản lý, ta lược bỏ các phần ít quan trọng trong cái <code>hàm</code> đi. Ví dụ như với kích thước input là n, ta tốn 9n<sup>2</sup> + 6n + 9 bước thì phần n<sup>2</sup> lớn hơn phần 6n + 9 (chú ý là đến 1 giá trị <code>n</code> nào đó thì nó mới lớn hơn, và từ đó trở đi sẽ luôn lớn hơn nữa. Mọi người học lại sách toán 9 để vẽ đồ thị sẽ rõ ).</p></li>\n<li>Vì thế ta bỏ <code>phần hệ số (số 9)</code> cùng <code>phần 6n + 9</code> đi, chỉ giữ lại n<sup>2</sup>. Và ta nói rằng <strong>Running time của thuật toán này là n<sup>2</sup></strong>\n</li>\n</ul>\n\n<p>Và theo kinh nghiệm thì ta luôn lấy biến có bậc cao nhất làm <code>running time</code>. Và khi ta bỏ đi phần hệ số cũng như phần <em>ít quan trọng</em> hơn kia, thì lúc này, chúng ta có thể làm việc với chúng qua một thứ gọi là: <strong>Asymptotic notation</strong>, hay là các <strong>ký hiệu tiệm cận</strong> (cái tên tiếng Việt nghe không lọt lỗ tai)</p>\n\n<p><strong>Asymptotic notation</strong> gồm các dạng:</p>\n\n<ul>\n<li><p><strong>Big-Theta</strong>:<img src=\"http://daynhauhoc.com/uploads/default/2878/bea1b788185e933d.png\" width=\"80\" height=\"80\">  </p></li>\n<li><p><strong>Big-O</strong>: thường được viết là O()</p></li>\n<li>\n<strong>Big-Omega</strong>: <img src=\"http://daynhauhoc.com/uploads/default/2879/21863d31290aed33.png\" width=\"80\" height=\"80\"> </li>\n</ul>\n\n<p>Chú ý: <br>- Do diễn đàn không hỗ trợ viết các notation này (mà có thì cũng chẳng mấy ai viết đâu, tốn thời gian lắm) nên sau này khi dùng đến chúng, hãy viết như mình viết ở trên.<br>- Giữa 2 chữ có dấu gạch nối nhé (<code>Big-O</code>, <code>Big-Theta</code>, <code>Big-Omega</code>)<br>- Sau các notation trên đều có đóng mở ngoặc đơn, bên trong là số liệu (ví dụ: <code>O(n)</code> )</p>\n\n<p>Về các loại notation trên, mình sẽ nghiên cứu và viết về chúng sau. Cám ơn mọi người</p>\n\n<p>Chết, quên ghi nguồn:<br><a href=\"http://khanacademy.org\" class=\"onebox\" target=\"_blank\">http://khanacademy.org</a></p>\n","rawBody":"\n<p>Ở bài này, mình sẽ nói về độ phức tạp của một thuật toán. Do mình cũng mới nghiên cứu để viết bài này nên chưa thể hiểu rõ được, nhưng mình sẽ cố viết một cách dễ hiểu, có thể sẽ có sai sót, mong mọi người thông cảm và góp ý. Mọi người ráng đọc vậy, hơi dài</p>\n\n<ul><li>Khi phân tích một thuật toán, một trong những vấn đề quan trọng nhất mà ta quan tâm là thời gian chạy (running time). Thời gian chạy của một thuật toán dựa trên nhiều yếu tố, ví dụ như tốc độ của máy tính, ngôn ngữ lập trình (C/C++, Python, blah blah blah, không phải tiếng Anh tiếng Miên gì nhá), compiler và blah blah blah, nói chung là nhiều yếu tố.</li></ul>\n\n<blockquote><p>=&gt; Vậy tiệm cận (Asymptotic) là một khái niệm giúp ta ước lượng được thời gian chạy (running time) của một thuật toán, thông qua <code>số chỉ thị (machine instructions)</code> hay gọi đơn giản là <code>số bước</code>.</p></blockquote>\n\n<p>Bây giờ hãy xem xét (chữ đầu là \"xờ\" nhé, chuyển thành \"sờ\" là có chuyện ngay) kỹ về <code>thời gian chạy (đây là lần cuối mình mở ngoặc và thêm chữ running time)</code>. Chúng ta phải nghĩ về 2 thứ</p>\n\n<blockquote>\n<p><strong>Ta phải xác định, với kích thước của input (dữ liệu nhập), thuật toán sẽ chạy bao lâu</strong>. Ví dụ như số bước thực hiện <strong>tối đa</strong> của <code>Binary Search</code> hay <code>Linear Search</code> tăng theo chiều dài của dãy số (mảng). Vì thế ta nghĩ về thời gian chạy của một thuật toán như là <code>một hàm về kích thước của dữ liệu nhập</code> . </p>\n<p>Ví dụ như ta có hàm <code>F(n) = 9n&lt;sup&gt;2&lt;/sup&gt; + 6n + 9</code> với n là kích thước <em>*tối đa</em> của dữ liệu nhập thì hàm F(n) chính là <code>running time</code></p>\n</blockquote>\n\n<ul>\n<li><p>Thứ 2, ta tập trung vào ý nghĩ: <strong>khi kích thước input tăng thì thì tốc độ của thuật toán sẽ tăng nhanh như thế nào</strong>. Hay như ví dụ trên: <code>Khi n (kích thước tối đa của input) tăng thì giá trị của hàm F(n) sẽ bao như thế nào (ví dụ n tăng 2 thì nguyên hàm đó tăng 4, đại loại thế)</code>. Và chúng ta gọi nó là <code>Tỷ suất gia tăng</code>, hay gọi cho đơn giản là <code>rate of grow</code> (mọi người luyện tiếng Anh chút vậy).</p></li>\n<li><p>Để dễ quản lý, ta lược bỏ các phần ít quan trọng trong cái <code>hàm</code> đi. Ví dụ như với kích thước input là n, ta tốn 9n<sup>2</sup> + 6n + 9 bước thì phần n<sup>2</sup> lớn hơn phần 6n + 9 (chú ý là đến 1 giá trị <code>n</code> nào đó thì nó mới lớn hơn, và từ đó trở đi sẽ luôn lớn hơn nữa. Mọi người học lại sách toán 9 để vẽ đồ thị sẽ rõ ).</p></li>\n<li>Vì thế ta bỏ <code>phần hệ số (số 9)</code> cùng <code>phần 6n + 9</code> đi, chỉ giữ lại n<sup>2</sup>. Và ta nói rằng <strong>Running time của thuật toán này là n<sup>2</sup></strong>\n</li>\n</ul>\n\n<p>Và theo kinh nghiệm thì ta luôn lấy biến có bậc cao nhất làm <code>running time</code>. Và khi ta bỏ đi phần hệ số cũng như phần <em>ít quan trọng</em> hơn kia, thì lúc này, chúng ta có thể làm việc với chúng qua một thứ gọi là: <strong>Asymptotic notation</strong>, hay là các <strong>ký hiệu tiệm cận</strong> (cái tên tiếng Việt nghe không lọt lỗ tai)</p>\n\n<p><strong>Asymptotic notation</strong> gồm các dạng:</p>\n\n<ul>\n<li><p><strong>Big-Theta</strong>:<img src=\"http://daynhauhoc.com/uploads/default/2878/bea1b788185e933d.png\" width=\"80\" height=\"80\">  </p></li>\n<li><p><strong>Big-O</strong>: thường được viết là O()</p></li>\n<li>\n<strong>Big-Omega</strong>: <img src=\"http://daynhauhoc.com/uploads/default/2879/21863d31290aed33.png\" width=\"80\" height=\"80\"> </li>\n</ul>\n\n<p>Chú ý: <br>- Do diễn đàn không hỗ trợ viết các notation này (mà có thì cũng chẳng mấy ai viết đâu, tốn thời gian lắm) nên sau này khi dùng đến chúng, hãy viết như mình viết ở trên.<br>- Giữa 2 chữ có dấu gạch nối nhé (<code>Big-O</code>, <code>Big-Theta</code>, <code>Big-Omega</code>)<br>- Sau các notation trên đều có đóng mở ngoặc đơn, bên trong là số liệu (ví dụ: <code>O(n)</code> )</p>\n\n<p>Về các loại notation trên, mình sẽ nghiên cứu và viết về chúng sau. Cám ơn mọi người</p>\n\n<p>Chết, quên ghi nguồn:<br><a href=\"http://khanacademy.org\" class=\"onebox\" target=\"_blank\">http://khanacademy.org</a></p>\n","raw":"---json\n{\"id\":6728,\"layout\":\"Post\",\"route\":\"phan-tich-thuat-toan-tiem-can-asymptotic-notation\",\"title\":\"[Phân tích thuật toán] Tiệm cận (Asymptotic notation)\",\"tags\":[\"algorithm\"],\"date\":\"2015-04-30T15:36:15.457Z\",\"views\":765,\"likes\":11,\"description\":\"Ở bài này, mình sẽ nói về độ phức tạp của một thuật toán. Do mình cũng mới nghiên cứu để viết bài này nên chưa thể hiểu rõ được, nhưng mình…\",\"author\":{\"name\":\"nhatlonggunz\",\"avatar\":\"/letter_avatar_proxy/v2/letter/n/7bcc69/{size}.png\",\"username\":\"nhatlonggunz\"}}\n---\n\n<p>Ở bài này, mình sẽ nói về độ phức tạp của một thuật toán. Do mình cũng mới nghiên cứu để viết bài này nên chưa thể hiểu rõ được, nhưng mình sẽ cố viết một cách dễ hiểu, có thể sẽ có sai sót, mong mọi người thông cảm và góp ý. Mọi người ráng đọc vậy, hơi dài</p>\n\n<ul><li>Khi phân tích một thuật toán, một trong những vấn đề quan trọng nhất mà ta quan tâm là thời gian chạy (running time). Thời gian chạy của một thuật toán dựa trên nhiều yếu tố, ví dụ như tốc độ của máy tính, ngôn ngữ lập trình (C/C++, Python, blah blah blah, không phải tiếng Anh tiếng Miên gì nhá), compiler và blah blah blah, nói chung là nhiều yếu tố.</li></ul>\n\n<blockquote><p>=&gt; Vậy tiệm cận (Asymptotic) là một khái niệm giúp ta ước lượng được thời gian chạy (running time) của một thuật toán, thông qua <code>số chỉ thị (machine instructions)</code> hay gọi đơn giản là <code>số bước</code>.</p></blockquote>\n\n<p>Bây giờ hãy xem xét (chữ đầu là \"xờ\" nhé, chuyển thành \"sờ\" là có chuyện ngay) kỹ về <code>thời gian chạy (đây là lần cuối mình mở ngoặc và thêm chữ running time)</code>. Chúng ta phải nghĩ về 2 thứ</p>\n\n<blockquote>\n<p><strong>Ta phải xác định, với kích thước của input (dữ liệu nhập), thuật toán sẽ chạy bao lâu</strong>. Ví dụ như số bước thực hiện <strong>tối đa</strong> của <code>Binary Search</code> hay <code>Linear Search</code> tăng theo chiều dài của dãy số (mảng). Vì thế ta nghĩ về thời gian chạy của một thuật toán như là <code>một hàm về kích thước của dữ liệu nhập</code> . </p>\n<p>Ví dụ như ta có hàm <code>F(n) = 9n&lt;sup&gt;2&lt;/sup&gt; + 6n + 9</code> với n là kích thước <em>*tối đa</em> của dữ liệu nhập thì hàm F(n) chính là <code>running time</code></p>\n</blockquote>\n\n<ul>\n<li><p>Thứ 2, ta tập trung vào ý nghĩ: <strong>khi kích thước input tăng thì thì tốc độ của thuật toán sẽ tăng nhanh như thế nào</strong>. Hay như ví dụ trên: <code>Khi n (kích thước tối đa của input) tăng thì giá trị của hàm F(n) sẽ bao như thế nào (ví dụ n tăng 2 thì nguyên hàm đó tăng 4, đại loại thế)</code>. Và chúng ta gọi nó là <code>Tỷ suất gia tăng</code>, hay gọi cho đơn giản là <code>rate of grow</code> (mọi người luyện tiếng Anh chút vậy).</p></li>\n<li><p>Để dễ quản lý, ta lược bỏ các phần ít quan trọng trong cái <code>hàm</code> đi. Ví dụ như với kích thước input là n, ta tốn 9n<sup>2</sup> + 6n + 9 bước thì phần n<sup>2</sup> lớn hơn phần 6n + 9 (chú ý là đến 1 giá trị <code>n</code> nào đó thì nó mới lớn hơn, và từ đó trở đi sẽ luôn lớn hơn nữa. Mọi người học lại sách toán 9 để vẽ đồ thị sẽ rõ ).</p></li>\n<li>Vì thế ta bỏ <code>phần hệ số (số 9)</code> cùng <code>phần 6n + 9</code> đi, chỉ giữ lại n<sup>2</sup>. Và ta nói rằng <strong>Running time của thuật toán này là n<sup>2</sup></strong>\n</li>\n</ul>\n\n<p>Và theo kinh nghiệm thì ta luôn lấy biến có bậc cao nhất làm <code>running time</code>. Và khi ta bỏ đi phần hệ số cũng như phần <em>ít quan trọng</em> hơn kia, thì lúc này, chúng ta có thể làm việc với chúng qua một thứ gọi là: <strong>Asymptotic notation</strong>, hay là các <strong>ký hiệu tiệm cận</strong> (cái tên tiếng Việt nghe không lọt lỗ tai)</p>\n\n<p><strong>Asymptotic notation</strong> gồm các dạng:</p>\n\n<ul>\n<li><p><strong>Big-Theta</strong>:<img src=\"http://daynhauhoc.com/uploads/default/2878/bea1b788185e933d.png\" width=\"80\" height=\"80\">  </p></li>\n<li><p><strong>Big-O</strong>: thường được viết là O()</p></li>\n<li>\n<strong>Big-Omega</strong>: <img src=\"http://daynhauhoc.com/uploads/default/2879/21863d31290aed33.png\" width=\"80\" height=\"80\"> </li>\n</ul>\n\n<p>Chú ý: <br>- Do diễn đàn không hỗ trợ viết các notation này (mà có thì cũng chẳng mấy ai viết đâu, tốn thời gian lắm) nên sau này khi dùng đến chúng, hãy viết như mình viết ở trên.<br>- Giữa 2 chữ có dấu gạch nối nhé (<code>Big-O</code>, <code>Big-Theta</code>, <code>Big-Omega</code>)<br>- Sau các notation trên đều có đóng mở ngoặc đơn, bên trong là số liệu (ví dụ: <code>O(n)</code> )</p>\n\n<p>Về các loại notation trên, mình sẽ nghiên cứu và viết về chúng sau. Cám ơn mọi người</p>\n\n<p>Chết, quên ghi nguồn:<br><a href=\"http://khanacademy.org\" class=\"onebox\" target=\"_blank\">http://khanacademy.org</a></p>\n","__filename":"posts/6728.md","__url":"/phan-tich-thuat-toan-tiem-can-asymptotic-notation/","__resourceUrl":"/phan-tich-thuat-toan-tiem-can-asymptotic-notation/index.html","__dataUrl":"/phan-tich-thuat-toan-tiem-can-asymptotic-notation/index.html.8a419d7010a1932612e212646fca93df.json"}
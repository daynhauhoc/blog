{"head":{"id":12722,"layout":"Post","route":"chia-se-ky-thuat-reflection","title":"[Chia sẻ] Kỹ thuật reflection","tags":["reflection"],"date":"2015-09-15T12:19:06.675Z","description":"1. Mở đầu :\n Hiện tại như mình thấy thì có rất ít sách cũng như ebook đề cập đến kỹ thuật reflection trong programming, và cũng rất ít bạn…"},"body":"<p><strong>1. Mở đầu :</strong>\nHiện tại như mình thấy thì có rất ít sách cũng như ebook đề cập đến kỹ thuật reflection trong programming, và cũng rất ít bạn biết về khái niệm này, trong khi hầu hết các framework lớn đều sử dụng. Không biết tới kỹ thuật này thì quả là một thiệt thòi không hề nhỏ :smile:.   Hôm nay mình sẽ chia sẻ một ít kiến thức về reflection trong programming, hy vọng có ích cho các bạn. ( lưu ý với các ngôn ngữ script, context có thể khác đi ).</p>\n<p><strong>2. Khái niệm</strong>\nĐã bao giờ bạn tự thắc mắc làm sao các framework MVC có thể mapping url request vào chính xác từng controller, hay làm sao spring lại có thể khởi tạo bean từ xml configuration or annotation, injection các giá trị vào bean? Tất cả là nhờ đến kỹ thuật reflection.Vậy reflection là gì?</p>\n<blockquote>\n<p>Reflection là một quy tắc cho phép bạn có thể <strong>quan sát (observing) và thay đổi chương trình lúc runtime</strong> (wiki) . Hiểu nôm na có nghĩa là reflection cho phép bạn gán/modify mã code trong thời gian chạy, hay nói cách khác, nó cho phép chúng ta làm việc với &quot;meta data&quot; của một object.</p>\n</blockquote>\n<p>Dựa vào reflection, chúng ta có thể kiểm tra xem một class A đã được định nghĩa chưa, Một method B thì có những annotation nào, call method của một object chưa biết tên lúc runtime mà không cần phải biết tên method đó lúc compile....</p>\n<p><strong>3. Example</strong>\nĐể hiểu rõ hơn về reflection thì chúng ta sẽ thử làm một ví dụ về reflection. À quên mất ngôn ngữ là java nhé các bạn :smile: ( .NET cũng tương tự như vậy nhé)</p>\n<p>Bài toán : Giả sử bạn có 1 chương trình để thực hiện update dữ liệu vào CSDL. Vì mỗi CSDL khác nhau nên chúng có cơ chế làm việc khác nhau. Giả sử chúng ta có class MysqlJdbcDriver để thao tác với CSDL Mysql, MssqlJdbcDriver để thao tác với CSDL MsSql. 2 class này đều implement interface JdbcDriver, có 1 method là executeSql. Tùy vào config, chương trình sẽ tự động instance driver tương ứng để kết nối CSDL.</p>\n<p>Interface JdbcDriver</p>\n<pre><code>public interface JdbcDriver {\n     void executeSql(String sql);\n}\n</code></pre>\n<p>Class MysqlJdbcDriver</p>\n<pre><code>public class MysqlJdbcDriver implements JdbcDriver {\n\n    public void executeSql(String sql) {\n        System.out.println(&quot;Run on Mysql&quot;);\n        System.out.println(&quot;Execute sql : &quot; + sql);\n    }\n} \n</code></pre>\n<p>Class MssqlJdbcDriver</p>\n<pre><code>public class MssqlJdbcDriver implements JdbcDriver {\n\n    public void executeSql(String sql) {\n        System.out.println(&quot;Run on Mssql&quot;);\n        System.out.println(&quot;Execute sql : &quot; + sql);\n    }\n } \n</code></pre>\n<p>Class Program</p>\n<pre><code>public class Program {\n    /** Chú ý : chuỗi chứa class driver trong ví dụ này mình đang để hard code.\n        Thực tế thì nó có thể được load từ xml configuration, Annotation value,environment variable database or anywhere\n    */\n    private String driverConfig = &quot;MssqlJdbcDriver&quot;;\n\n    JdbcDriver jdbc;\n\n    public Program() throws Exception {\n        Class&lt;?&gt; driverClass = Class.forName(driverConfig);\n         // create object by name\n        this.jdbc = (JdbcDriver) driverClass.getConstructor().newInstance();\n    }\n\n    public void doUpdateData() {\n        this.jdbc.executeSql(&quot;update a set b = &#x27;c&#x27;&quot;);\n    }\n\n    public static void main(String[] args) throws Exception {\n\n        Program p = new Program();\n        p.doUpdateData();\n    }\n}\n</code></pre>\n<p>Chạy chương trình lên bạn sẽ thấy kết quả :smile:</p>\n<blockquote>\n<p>Run on Mysql\nExecute sql : update a set b = &#x27;c&#x27;</p>\n</blockquote>\n<p>Thay đổi giá trị của driverConfig thành MssqlJdbcDriver, kết quả</p>\n<blockquote>\n<p>Run on Mssql\nExecute sql : update a set b = &#x27;c&#x27;</p>\n</blockquote>\n<p>Bạn thấy đấy, nếu có thay đổi CSDL, thì class Program cũng không phải thay đổi gì. Chúng ta đã injection giá trị cho variable jdbc  :smile:</p>\n<p>Extra : Trong MVC, thì các url thường được mapping với các controller cụ thể. Các bạn cũng có thể dùng reflection để gửi request đến đúng Controller. Kiến trúc cũng rất đơn giản :</p>\n<ol>\n<li>Bạn có 1 Servlet sẽ handle toàn bộ request : url-pattern = * (web.xml)</li>\n<li>Trong Servlet này, dựa vào url request, bạn có thể xác định được url request tương ứng với class controller nào? tương ứng với method nào trong controller đó. giả sử request là /abc/def thì class controller sẽ là acb, method là def ( or bạn có thể tự đặt ra rule cho riêng mình :smile: ) </li>\n<li>Khởi tạo đối tượng controller và call method tương ứng bằng reflection.</li>\n<li>Nhận kết quả trả về từ step 3, response về cho người dùng.</li>\n</ol>\n<p><strong>4. Kết luận :</strong>\nĐể hiểu rõ hơn thì các bạn cần phải thực hành nhiều hơn và gặp những bài toán cụ thể. Vì phần này đa số nằm ở các framework nên cũng ít va chạm. Hy vọng topic có ích cho các bạn. Mình chỉ chia sẻ những kiến thức mình biết. Nếu có gì sai mong các bạn góp ý. Thank all.</p>\n","rawBody":"\n**1. Mở đầu :**\n Hiện tại như mình thấy thì có rất ít sách cũng như ebook đề cập đến kỹ thuật reflection trong programming, và cũng rất ít bạn biết về khái niệm này, trong khi hầu hết các framework lớn đều sử dụng. Không biết tới kỹ thuật này thì quả là một thiệt thòi không hề nhỏ :smile:.   Hôm nay mình sẽ chia sẻ một ít kiến thức về reflection trong programming, hy vọng có ích cho các bạn. ( lưu ý với các ngôn ngữ script, context có thể khác đi ).\n\n**2. Khái niệm**\nĐã bao giờ bạn tự thắc mắc làm sao các framework MVC có thể mapping url request vào chính xác từng controller, hay làm sao spring lại có thể khởi tạo bean từ xml configuration or annotation, injection các giá trị vào bean? Tất cả là nhờ đến kỹ thuật reflection.Vậy reflection là gì?\n\n> Reflection là một quy tắc cho phép bạn có thể **quan sát (observing) và thay đổi chương trình lúc runtime** (wiki) . Hiểu nôm na có nghĩa là reflection cho phép bạn gán/modify mã code trong thời gian chạy, hay nói cách khác, nó cho phép chúng ta làm việc với \"meta data\" của một object. \n\nDựa vào reflection, chúng ta có thể kiểm tra xem một class A đã được định nghĩa chưa, Một method B thì có những annotation nào, call method của một object chưa biết tên lúc runtime mà không cần phải biết tên method đó lúc compile....\n\n**3. Example**\nĐể hiểu rõ hơn về reflection thì chúng ta sẽ thử làm một ví dụ về reflection. À quên mất ngôn ngữ là java nhé các bạn :smile: ( .NET cũng tương tự như vậy nhé) \n\nBài toán : Giả sử bạn có 1 chương trình để thực hiện update dữ liệu vào CSDL. Vì mỗi CSDL khác nhau nên chúng có cơ chế làm việc khác nhau. Giả sử chúng ta có class MysqlJdbcDriver để thao tác với CSDL Mysql, MssqlJdbcDriver để thao tác với CSDL MsSql. 2 class này đều implement interface JdbcDriver, có 1 method là executeSql. Tùy vào config, chương trình sẽ tự động instance driver tương ứng để kết nối CSDL.\n\nInterface JdbcDriver\n\n    public interface JdbcDriver {\n         void executeSql(String sql);\n    }\n\nClass MysqlJdbcDriver \n\n    public class MysqlJdbcDriver implements JdbcDriver {\n\n        public void executeSql(String sql) {\n            System.out.println(\"Run on Mysql\");\n            System.out.println(\"Execute sql : \" + sql);\n        }\n    } \n\nClass MssqlJdbcDriver \n\n    public class MssqlJdbcDriver implements JdbcDriver {\n\n        public void executeSql(String sql) {\n            System.out.println(\"Run on Mssql\");\n            System.out.println(\"Execute sql : \" + sql);\n        }\n     } \n\nClass Program\n\n    public class Program {\n        /** Chú ý : chuỗi chứa class driver trong ví dụ này mình đang để hard code.\n            Thực tế thì nó có thể được load từ xml configuration, Annotation value,environment variable database or anywhere\n        */\n        private String driverConfig = \"MssqlJdbcDriver\";\n    \n        JdbcDriver jdbc;\n    \n        public Program() throws Exception {\n            Class<?> driverClass = Class.forName(driverConfig);\n             // create object by name\n            this.jdbc = (JdbcDriver) driverClass.getConstructor().newInstance();\n        }\n    \n        public void doUpdateData() {\n            this.jdbc.executeSql(\"update a set b = 'c'\");\n        }\n    \n        public static void main(String[] args) throws Exception {\n    \n            Program p = new Program();\n            p.doUpdateData();\n        }\n    }\n\n Chạy chương trình lên bạn sẽ thấy kết quả :smile:\n> Run on Mysql\n> Execute sql : update a set b = 'c'  \n\nThay đổi giá trị của driverConfig thành MssqlJdbcDriver, kết quả\n> Run on Mssql\n> Execute sql : update a set b = 'c'\n\nBạn thấy đấy, nếu có thay đổi CSDL, thì class Program cũng không phải thay đổi gì. Chúng ta đã injection giá trị cho variable jdbc  :smile:\n\nExtra : Trong MVC, thì các url thường được mapping với các controller cụ thể. Các bạn cũng có thể dùng reflection để gửi request đến đúng Controller. Kiến trúc cũng rất đơn giản : \n   1. Bạn có 1 Servlet sẽ handle toàn bộ request : url-pattern = * (web.xml)\n   2. Trong Servlet này, dựa vào url request, bạn có thể xác định được url request tương ứng với class controller nào? tương ứng với method nào trong controller đó. giả sử request là /abc/def thì class controller sẽ là acb, method là def ( or bạn có thể tự đặt ra rule cho riêng mình :smile: ) \n   3. Khởi tạo đối tượng controller và call method tương ứng bằng reflection.\n   4.  Nhận kết quả trả về từ step 3, response về cho người dùng.\n\n **4. Kết luận :**\n  Để hiểu rõ hơn thì các bạn cần phải thực hành nhiều hơn và gặp những bài toán cụ thể. Vì phần này đa số nằm ở các framework nên cũng ít va chạm. Hy vọng topic có ích cho các bạn. Mình chỉ chia sẻ những kiến thức mình biết. Nếu có gì sai mong các bạn góp ý. Thank all.\n","raw":"---json\n{\"id\":12722,\"layout\":\"Post\",\"route\":\"chia-se-ky-thuat-reflection\",\"title\":\"[Chia sẻ] Kỹ thuật reflection\",\"tags\":[\"reflection\"],\"date\":\"2015-09-15T12:19:06.675Z\"}\n---\n\n**1. Mở đầu :**\n Hiện tại như mình thấy thì có rất ít sách cũng như ebook đề cập đến kỹ thuật reflection trong programming, và cũng rất ít bạn biết về khái niệm này, trong khi hầu hết các framework lớn đều sử dụng. Không biết tới kỹ thuật này thì quả là một thiệt thòi không hề nhỏ :smile:.   Hôm nay mình sẽ chia sẻ một ít kiến thức về reflection trong programming, hy vọng có ích cho các bạn. ( lưu ý với các ngôn ngữ script, context có thể khác đi ).\n\n**2. Khái niệm**\nĐã bao giờ bạn tự thắc mắc làm sao các framework MVC có thể mapping url request vào chính xác từng controller, hay làm sao spring lại có thể khởi tạo bean từ xml configuration or annotation, injection các giá trị vào bean? Tất cả là nhờ đến kỹ thuật reflection.Vậy reflection là gì?\n\n> Reflection là một quy tắc cho phép bạn có thể **quan sát (observing) và thay đổi chương trình lúc runtime** (wiki) . Hiểu nôm na có nghĩa là reflection cho phép bạn gán/modify mã code trong thời gian chạy, hay nói cách khác, nó cho phép chúng ta làm việc với \"meta data\" của một object. \n\nDựa vào reflection, chúng ta có thể kiểm tra xem một class A đã được định nghĩa chưa, Một method B thì có những annotation nào, call method của một object chưa biết tên lúc runtime mà không cần phải biết tên method đó lúc compile....\n\n**3. Example**\nĐể hiểu rõ hơn về reflection thì chúng ta sẽ thử làm một ví dụ về reflection. À quên mất ngôn ngữ là java nhé các bạn :smile: ( .NET cũng tương tự như vậy nhé) \n\nBài toán : Giả sử bạn có 1 chương trình để thực hiện update dữ liệu vào CSDL. Vì mỗi CSDL khác nhau nên chúng có cơ chế làm việc khác nhau. Giả sử chúng ta có class MysqlJdbcDriver để thao tác với CSDL Mysql, MssqlJdbcDriver để thao tác với CSDL MsSql. 2 class này đều implement interface JdbcDriver, có 1 method là executeSql. Tùy vào config, chương trình sẽ tự động instance driver tương ứng để kết nối CSDL.\n\nInterface JdbcDriver\n\n    public interface JdbcDriver {\n         void executeSql(String sql);\n    }\n\nClass MysqlJdbcDriver \n\n    public class MysqlJdbcDriver implements JdbcDriver {\n\n        public void executeSql(String sql) {\n            System.out.println(\"Run on Mysql\");\n            System.out.println(\"Execute sql : \" + sql);\n        }\n    } \n\nClass MssqlJdbcDriver \n\n    public class MssqlJdbcDriver implements JdbcDriver {\n\n        public void executeSql(String sql) {\n            System.out.println(\"Run on Mssql\");\n            System.out.println(\"Execute sql : \" + sql);\n        }\n     } \n\nClass Program\n\n    public class Program {\n        /** Chú ý : chuỗi chứa class driver trong ví dụ này mình đang để hard code.\n            Thực tế thì nó có thể được load từ xml configuration, Annotation value,environment variable database or anywhere\n        */\n        private String driverConfig = \"MssqlJdbcDriver\";\n    \n        JdbcDriver jdbc;\n    \n        public Program() throws Exception {\n            Class<?> driverClass = Class.forName(driverConfig);\n             // create object by name\n            this.jdbc = (JdbcDriver) driverClass.getConstructor().newInstance();\n        }\n    \n        public void doUpdateData() {\n            this.jdbc.executeSql(\"update a set b = 'c'\");\n        }\n    \n        public static void main(String[] args) throws Exception {\n    \n            Program p = new Program();\n            p.doUpdateData();\n        }\n    }\n\n Chạy chương trình lên bạn sẽ thấy kết quả :smile:\n> Run on Mysql\n> Execute sql : update a set b = 'c'  \n\nThay đổi giá trị của driverConfig thành MssqlJdbcDriver, kết quả\n> Run on Mssql\n> Execute sql : update a set b = 'c'\n\nBạn thấy đấy, nếu có thay đổi CSDL, thì class Program cũng không phải thay đổi gì. Chúng ta đã injection giá trị cho variable jdbc  :smile:\n\nExtra : Trong MVC, thì các url thường được mapping với các controller cụ thể. Các bạn cũng có thể dùng reflection để gửi request đến đúng Controller. Kiến trúc cũng rất đơn giản : \n   1. Bạn có 1 Servlet sẽ handle toàn bộ request : url-pattern = * (web.xml)\n   2. Trong Servlet này, dựa vào url request, bạn có thể xác định được url request tương ứng với class controller nào? tương ứng với method nào trong controller đó. giả sử request là /abc/def thì class controller sẽ là acb, method là def ( or bạn có thể tự đặt ra rule cho riêng mình :smile: ) \n   3. Khởi tạo đối tượng controller và call method tương ứng bằng reflection.\n   4.  Nhận kết quả trả về từ step 3, response về cho người dùng.\n\n **4. Kết luận :**\n  Để hiểu rõ hơn thì các bạn cần phải thực hành nhiều hơn và gặp những bài toán cụ thể. Vì phần này đa số nằm ở các framework nên cũng ít va chạm. Hy vọng topic có ích cho các bạn. Mình chỉ chia sẻ những kiến thức mình biết. Nếu có gì sai mong các bạn góp ý. Thank all.\n","__filename":"posts/12722.md","__url":"/chia-se-ky-thuat-reflection/","__resourceUrl":"/chia-se-ky-thuat-reflection/index.html","__dataUrl":"/chia-se-ky-thuat-reflection/index.html.b0ff9d4f5a9d3776443fd7b0c6763135.json"}
{"head":{"id":6429,"layout":"Post","route":"cap-phat-bo-nho-dong-trong-c-malloc-hay-calloc","title":"Cấp phát bộ nhớ động trong C : Malloc hay Calloc","tags":["tutorial","c"],"date":"2015-04-24T09:01:33.444Z","views":4399,"likes":11,"description":"Cấp phát bộ nhớ động trong C : Malloc vs Calloc\n\nĐể cấp phát bộ nhớ động trong C, chúng ta có 2 cách:1. void* malloc (size_t size);2. void…","author":{"name":"Coulson","avatar":"/user_avatar/daynhauhoc.com/dung_nguyen/{size}/2965_1.png","username":"Dung_Nguyen"}},"body":"\n<h2>Cấp phát bộ nhớ động trong C : Malloc vs Calloc</h2>\n\n<p>Để cấp phát bộ nhớ động trong C, chúng ta có 2 cách:<br>1. <code>void* malloc (size_t size);</code><br>2. <code>void* calloc (size_t num, size_t size);</code></p>\n\n<h3>So sánh</h3>\n\n<p><div class=\"lightbox-wrapper\"><a data-download-href=\"//daynhauhoc.com/uploads/default/1069692cf95c2870534a1505fd81d111fd9db293\" href=\"http://daynhauhoc.com/uploads/default/2715/1e741af50da68e72.png\" class=\"lightbox\" title=\"StackEdit – Editor.png\"><img src=\"http://daynhauhoc.com/uploads/default/_optimized/519/71e/8c6ce1325c_690x322.png\" width=\"690\" height=\"322\"><div class=\"meta\">\n<span class=\"filename\">StackEdit – Editor.png</span><span class=\"informations\">820x383 40.2 KB</span><span class=\"expand\"></span>\n</div></a></div> </p>\n\n<h3>Sử dụng</h3>\n\n<ul>\n<li>Khi sử dụng <code>malloc</code>  phải tính toán kích thước vùng nhớ cần cấp phát trước rồi truyền vào cho <code>malloc</code>\n</li>\n<li>Khi sử dụng <code>calloc</code> chỉ cần truyền vào số phần tử và kích thước 1 phần tử, thì <code>calloc</code> sẽ tự động tính toán và cấp phát vùng nhớ cần thiết</li>\n</ul>\n\n<p><strong>Ví dụ</strong>: Cấp phát mảng 10 phần tử kiểu int: </p>\n\n<p><code>int *a = (int *) malloc( 10 * sizeof( int ));</code><br> <code>int *b = (int *) calloc( 10, sizeof( int ));</code></p>\n\n<h3>Hiệu suất / Perfomance</h3>\n\n<p><strong>malloc</strong> nhanh hơn so với <strong>calloc</strong>. Lý do là <strong>calloc</strong> ngoài việc có nhiệm vụ cấp phát vùng nhớ như <strong>malloc</strong>, nó còn phải gán giá trị cho tất cả các phần tử của vùng nhớ vừa cấp phát = 0</p>\n\n<p> <code>int *a = (int *) calloc(10, sizeof( int ));</code><br> tương đương với<br> <code>int *b = (int *) malloc( 10 * sizeof( int ));<br> memset(b, 0, 10 * sizeof(int));<br></code></p>\n\n<h3>Sự an toàn</h3>\n\n<p> Sử dụng <strong>calloc</strong> an toàn hơn <strong>malloc</strong> vì sau khi khởi tạo vùng nhớ thì <strong>calloc</strong> sẽ khởi tạo vùng nhớ cấp phát = 0, còn vùng nhớ do <strong>malloc</strong> cấp phát vẫn chứa giá trị rác nên sẽ dễ gây ra lỗi nếu truy xuất tới vùn nhớ này trước khi gán cho nó một giá trị xác định.</p>\n","rawBody":"\n<h2>Cấp phát bộ nhớ động trong C : Malloc vs Calloc</h2>\n\n<p>Để cấp phát bộ nhớ động trong C, chúng ta có 2 cách:<br>1. <code>void* malloc (size_t size);</code><br>2. <code>void* calloc (size_t num, size_t size);</code></p>\n\n<h3>So sánh</h3>\n\n<p><div class=\"lightbox-wrapper\"><a data-download-href=\"//daynhauhoc.com/uploads/default/1069692cf95c2870534a1505fd81d111fd9db293\" href=\"http://daynhauhoc.com/uploads/default/2715/1e741af50da68e72.png\" class=\"lightbox\" title=\"StackEdit – Editor.png\"><img src=\"http://daynhauhoc.com/uploads/default/_optimized/519/71e/8c6ce1325c_690x322.png\" width=\"690\" height=\"322\"><div class=\"meta\">\n<span class=\"filename\">StackEdit – Editor.png</span><span class=\"informations\">820x383 40.2 KB</span><span class=\"expand\"></span>\n</div></a></div> </p>\n\n<h3>Sử dụng</h3>\n\n<ul>\n<li>Khi sử dụng <code>malloc</code>  phải tính toán kích thước vùng nhớ cần cấp phát trước rồi truyền vào cho <code>malloc</code>\n</li>\n<li>Khi sử dụng <code>calloc</code> chỉ cần truyền vào số phần tử và kích thước 1 phần tử, thì <code>calloc</code> sẽ tự động tính toán và cấp phát vùng nhớ cần thiết</li>\n</ul>\n\n<p><strong>Ví dụ</strong>: Cấp phát mảng 10 phần tử kiểu int: </p>\n\n<p><code>int *a = (int *) malloc( 10 * sizeof( int ));</code><br> <code>int *b = (int *) calloc( 10, sizeof( int ));</code></p>\n\n<h3>Hiệu suất / Perfomance</h3>\n\n<p><strong>malloc</strong> nhanh hơn so với <strong>calloc</strong>. Lý do là <strong>calloc</strong> ngoài việc có nhiệm vụ cấp phát vùng nhớ như <strong>malloc</strong>, nó còn phải gán giá trị cho tất cả các phần tử của vùng nhớ vừa cấp phát = 0</p>\n\n<p> <code>int *a = (int *) calloc(10, sizeof( int ));</code><br> tương đương với<br> <code>int *b = (int *) malloc( 10 * sizeof( int ));<br> memset(b, 0, 10 * sizeof(int));<br></code></p>\n\n<h3>Sự an toàn</h3>\n\n<p> Sử dụng <strong>calloc</strong> an toàn hơn <strong>malloc</strong> vì sau khi khởi tạo vùng nhớ thì <strong>calloc</strong> sẽ khởi tạo vùng nhớ cấp phát = 0, còn vùng nhớ do <strong>malloc</strong> cấp phát vẫn chứa giá trị rác nên sẽ dễ gây ra lỗi nếu truy xuất tới vùn nhớ này trước khi gán cho nó một giá trị xác định.</p>\n","raw":"---json\n{\"id\":6429,\"layout\":\"Post\",\"route\":\"cap-phat-bo-nho-dong-trong-c-malloc-hay-calloc\",\"title\":\"Cấp phát bộ nhớ động trong C : Malloc hay Calloc\",\"tags\":[\"tutorial\",\"c\"],\"date\":\"2015-04-24T09:01:33.444Z\",\"views\":4399,\"likes\":11,\"description\":\"Cấp phát bộ nhớ động trong C : Malloc vs Calloc\\n\\nĐể cấp phát bộ nhớ động trong C, chúng ta có 2 cách:1. void* malloc (size_t size);2. void…\",\"author\":{\"name\":\"Coulson\",\"avatar\":\"/user_avatar/daynhauhoc.com/dung_nguyen/{size}/2965_1.png\",\"username\":\"Dung_Nguyen\"}}\n---\n\n<h2>Cấp phát bộ nhớ động trong C : Malloc vs Calloc</h2>\n\n<p>Để cấp phát bộ nhớ động trong C, chúng ta có 2 cách:<br>1. <code>void* malloc (size_t size);</code><br>2. <code>void* calloc (size_t num, size_t size);</code></p>\n\n<h3>So sánh</h3>\n\n<p><div class=\"lightbox-wrapper\"><a data-download-href=\"//daynhauhoc.com/uploads/default/1069692cf95c2870534a1505fd81d111fd9db293\" href=\"http://daynhauhoc.com/uploads/default/2715/1e741af50da68e72.png\" class=\"lightbox\" title=\"StackEdit – Editor.png\"><img src=\"http://daynhauhoc.com/uploads/default/_optimized/519/71e/8c6ce1325c_690x322.png\" width=\"690\" height=\"322\"><div class=\"meta\">\n<span class=\"filename\">StackEdit – Editor.png</span><span class=\"informations\">820x383 40.2 KB</span><span class=\"expand\"></span>\n</div></a></div> </p>\n\n<h3>Sử dụng</h3>\n\n<ul>\n<li>Khi sử dụng <code>malloc</code>  phải tính toán kích thước vùng nhớ cần cấp phát trước rồi truyền vào cho <code>malloc</code>\n</li>\n<li>Khi sử dụng <code>calloc</code> chỉ cần truyền vào số phần tử và kích thước 1 phần tử, thì <code>calloc</code> sẽ tự động tính toán và cấp phát vùng nhớ cần thiết</li>\n</ul>\n\n<p><strong>Ví dụ</strong>: Cấp phát mảng 10 phần tử kiểu int: </p>\n\n<p><code>int *a = (int *) malloc( 10 * sizeof( int ));</code><br> <code>int *b = (int *) calloc( 10, sizeof( int ));</code></p>\n\n<h3>Hiệu suất / Perfomance</h3>\n\n<p><strong>malloc</strong> nhanh hơn so với <strong>calloc</strong>. Lý do là <strong>calloc</strong> ngoài việc có nhiệm vụ cấp phát vùng nhớ như <strong>malloc</strong>, nó còn phải gán giá trị cho tất cả các phần tử của vùng nhớ vừa cấp phát = 0</p>\n\n<p> <code>int *a = (int *) calloc(10, sizeof( int ));</code><br> tương đương với<br> <code>int *b = (int *) malloc( 10 * sizeof( int ));<br> memset(b, 0, 10 * sizeof(int));<br></code></p>\n\n<h3>Sự an toàn</h3>\n\n<p> Sử dụng <strong>calloc</strong> an toàn hơn <strong>malloc</strong> vì sau khi khởi tạo vùng nhớ thì <strong>calloc</strong> sẽ khởi tạo vùng nhớ cấp phát = 0, còn vùng nhớ do <strong>malloc</strong> cấp phát vẫn chứa giá trị rác nên sẽ dễ gây ra lỗi nếu truy xuất tới vùn nhớ này trước khi gán cho nó một giá trị xác định.</p>\n","__filename":"posts/6429.md","__url":"/cap-phat-bo-nho-dong-trong-c-malloc-hay-calloc/","__resourceUrl":"/cap-phat-bo-nho-dong-trong-c-malloc-hay-calloc/index.html","__dataUrl":"/cap-phat-bo-nho-dong-trong-c-malloc-hay-calloc/index.html.699de0cea4bcf42f9247614d75f8edc0.json"}
{"head":{"id":6921,"layout":"Post","route":"lam-sao-de-su-dung-bien-hieu-qua-hon-part1","title":"Làm sao để sử dụng biến hiệu quả hơn (part1)","tags":["coding-style"],"date":"2015-05-05T17:12:29.073Z","description":"Khi chương trình còn đơn giản thì việc sử dụng biến thường không thành vấn đề, nhưng khi bạn làm những chương trình lớn hơn thì việc sử dụng…"},"body":"<p>Khi chương trình còn đơn giản thì việc sử dụng biến thường không thành vấn đề, nhưng khi bạn làm những chương trình lớn hơn thì việc sử dụng biến thế nào cho dễ quản lí, tránh lỗi không mong muốn và dễ bảo trì, nâng cấp sau này thì không đơn giản tí nào :blush:</p>\n<p>#Part1: Một số lưu ý về khi khai báo biến và khởi tạo biến (Declarations and Initializing Variables)</p>\n<div align=center><img src='/uploads/default/2981/7532b9c68694adf2.jpg'></div>\n<h2 id=\"khng-s-dng-tnh-nng-khai-bo-nimplicit-declarations\"><a href=\"#khng-s-dng-tnh-nng-khai-bo-nimplicit-declarations\" class=\"statinamic-HeadingAnchor\">#</a>##Không sử dụng tính năng khai báo ẩn(Implicit Declarations)</h2>\n<p>Một số ngôn ngữ hỗ trợ khai báo ẩn, tức là khi bạn quên mất không khai báo biến nào đó thì compiler sẽ tự động khai báo cho bạn (ví dụ như Visual Basic). Chức năng này thực sự rất nguy hiểm và đây là một số lưu ý với tính năng này:</p>\n<p><strong>Tắt khai báo ẩn</strong>. Một số trình biên dịch cho phép tắt khai báo ẩn.  Ví dụ, trong Visual Basic bạn có thể dùng câu lệnh <em>Option Explicit</em>, câu đó sẽ bắt bạn phải khai báo toàn bộ các biến trước khi bạn sử dụng chúng.</p>\n<p><strong>Khai báo tất cả các biến</strong>. Khi bạn gõ một biến mới, hãy khai báo nó, dù cho compiler không yêu cầu</p>\n<h2 id=\"khi-to-bin\"><a href=\"#khi-to-bin\" class=\"statinamic-HeadingAnchor\">#</a>##Khởi tạo biến</h2>\n<p>Đây là 3 trường hợp phổ biến về việc biến tự dưng có những giá trị mà bạn không ngờ tới:</p>\n<ul>\n<li>\n<p><strong>Biến từ đầu đã chưa hề được gán giá trị</strong>. Vì thế nên giá trị của nó có thể là bất kì giá trị nào trong bộ nhớ từ khi khởi động chương trình.</p>\n</li>\n<li>\n<p><strong>Giá trị của biến đã &quot;hết hạn sử dụng&quot;</strong>. Biến đã được gán một giá trị tại một số thời điểm nào đó, nhưng giá trị đó sau này không còn hợp lệ nữa.</p>\n</li>\n<li>\n<p><strong>Làm việc với con trỏ.</strong> Khi làm việc với con trỏ nếu không cẩn thận bạn rất dễ bị dính những lỗi cực kì khó debug, vì triệu chứng lỗi của con trỏ thường hay thay đổi theo thời gian nên có thể nói lỗi về con trỏ là &quot;nỗi khiếp sợ &quot; của lập trình viên.</p>\n</li>\n</ul>\n<p>Và đây sẽ là cách để bạn tránh những trường hợp như vậy xảy ra:</p>\n<p><strong>Khởi tạo biến ngay khi nó được khai báo.</strong></p>\n<pre><code class=\"hljs language-c\"> <span class=\"hljs-keyword\">float</span> studentGrades[ MAX_STUDENTS ] = { <span class=\"hljs-number\">0.0</span> }</code></pre>\n<p><strong>Khởi tạo biến ngay trước khi nó được dùng lần đầu tiên</strong>.</p>\n<p>Ví dụ:</p>\n<pre><code>Dim accountIndex As Integer\n\naccountIndex = 0\n&#x27; code using accountIndex\n...\n\nDim total As Double\ntotal = 0.0       &lt;-- 1\n&#x27; code using total\n...\n\nDim done As Boolean\ndone = False       &lt;-- 2\n&#x27; code using done\nWhile Not done\n...\n(1) total được khai báo và khởi tạo gần với vị trí nó được sử dụng lần đầu tiên\n(2) done cũng được khai báo và khởi tạo gần với vị trí nó được sử dụng lần đầu tiên\n</code></pre>\n<p>Đây chính là ví dụ cho  <strong>Nguyên Tắc Tiệm Cận</strong>: <strong>&quot;Hãy giữ những  thứ có liên quan ở gần nhau&quot;</strong>. Ta có thể áp dụng nguyên tắc này trong việc giữ những comment gần với code mà được chúng giải thích, hoặc là giữ sự thiết lập vòng lặp gần vòng lặp hoặc là giữ những lời gọi (tham chiếu)  đến 1 biến gần nhau (cái này sẽ được nói chi tiết trong bài nói về phạm vi biến) và còn rất nhiều trường hợp để áp dụng nguyên tắc này nữa.</p>\n<p><strong>Sử dụng <code>final</code> hoặc là <code>const</code> khi có thể</strong>.Với những biến mà được khai báo bằng <code>final</code> trong Java hoặc <code>const</code> trong C++, bạn có thể bảo vệ biến của bạn từ khi bạn khởi tạo cho nó một giá trị nào đó.</p>\n<p><strong>Và bạn hãy nhớ chú ý đến các biến kiểu như biến đếm.</strong> Những biến như là <code>i</code>, <code>j</code>, <code>k</code>,<code>sum</code> và <code>total</code> thường được sử dụng làm biến đếm, biến tích trữ. Lỗi cơ bản trong lập trình là việc quên mất không reset các biến đếm trước khi sử dụng chúng tiếp ở lần sau.</p>\n<p><strong>Hãy tận dụng lợi thế của các cảnh báo của compiler.</strong> Nhiều trình biên dịch cảnh báo bạn rằng bạn quên khởi tạo biến.</p>\n<p><strong>Luôn kiểm tra tính hợp lệ của các tham số truyền vào.</strong> Trước khi bạn gán giá trị truyền vào, hãy chắc chắn rằng nó hợp lệ.</p>\n<p><strong>Sử dụng memory-access checkers để debug mấy lỗi về con trỏ</strong> (chưa dùng cái này bao giờ, bác nào biết xin chỉ giáo :joy:)</p>\n<p><strong>Debug lỗi con trỏ bằng cách nhập những giá trị đặc biệt</strong>. Giá trị 0 là lựa chọn tốt vì nó dễ bị phát hiện ra hơn khi chúng được sử dụng. Với vi xử lí Intel, 0xCC là một giá trị khá tốt để sử dụng. Một ích lợi khác của giá trị 0xCC là nó rất dễ dàng nhận ra trong memory dump - và nó ít khi được sử dụng với lí do chính thống. Ngoài ra, bạn cũng có thể sử dụng hằng số 0xDEADBEEF cho việc này. (vãi cả thịt bò chết :smile: hình như có liên quan đến câu hỏi tuyển dụng của google thì phải)</p>\n<p><strong>Và cuối cùng là đừng quên khởi tạo bộ nhớ làm việc khi bắt đầu chương trình</strong>.</p>\n<hr>\n<p>Bài viết có tham khảo một số nội dung trong cuốn Code Complete và các tài liệu khác :blush:</p>\n<hr>\n<p>Part2 ở đây: <a href=\"http://daynhauhoc.com/t/lam-sao-de-su-dung-bien-hieu-qua-hon-part2/6936\">http://daynhauhoc.com/t/lam-sao-de-su-dung-bien-hieu-qua-hon-part2/6936</a>\nPart3 ở đây: <a href=\"http://daynhauhoc.com/t/lam-sao-de-su-dung-bien-hieu-qua-hon-part3/6992\">http://daynhauhoc.com/t/lam-sao-de-su-dung-bien-hieu-qua-hon-part3/6992</a>\nPart4 ở đây: <a href=\"http://daynhauhoc.com/t/lam-sao-de-su-dung-bien-hieu-qua-hon-part-4/7063\">http://daynhauhoc.com/t/lam-sao-de-su-dung-bien-hieu-qua-hon-part-4/7063</a></p>\n","rawBody":"\nKhi chương trình còn đơn giản thì việc sử dụng biến thường không thành vấn đề, nhưng khi bạn làm những chương trình lớn hơn thì việc sử dụng biến thế nào cho dễ quản lí, tránh lỗi không mong muốn và dễ bảo trì, nâng cấp sau này thì không đơn giản tí nào :blush: \n\n#Part1: Một số lưu ý về khi khai báo biến và khởi tạo biến (Declarations and Initializing Variables)\n\n<div align=center><img src='/uploads/default/2981/7532b9c68694adf2.jpg'></div>\n\n##Không sử dụng tính năng khai báo ẩn(Implicit Declarations)\n-----\n\nMột số ngôn ngữ hỗ trợ khai báo ẩn, tức là khi bạn quên mất không khai báo biến nào đó thì compiler sẽ tự động khai báo cho bạn (ví dụ như Visual Basic). Chức năng này thực sự rất nguy hiểm và đây là một số lưu ý với tính năng này:\n\n \n**Tắt khai báo ẩn**. Một số trình biên dịch cho phép tắt khai báo ẩn.  Ví dụ, trong Visual Basic bạn có thể dùng câu lệnh *Option Explicit*, câu đó sẽ bắt bạn phải khai báo toàn bộ các biến trước khi bạn sử dụng chúng.\n\n**Khai báo tất cả các biến**. Khi bạn gõ một biến mới, hãy khai báo nó, dù cho compiler không yêu cầu\n\n##Khởi tạo biến\n-----\n\nĐây là 3 trường hợp phổ biến về việc biến tự dưng có những giá trị mà bạn không ngờ tới:\n\n- **Biến từ đầu đã chưa hề được gán giá trị**. Vì thế nên giá trị của nó có thể là bất kì giá trị nào trong bộ nhớ từ khi khởi động chương trình.\n\n-  **Giá trị của biến đã \"hết hạn sử dụng\"**. Biến đã được gán một giá trị tại một số thời điểm nào đó, nhưng giá trị đó sau này không còn hợp lệ nữa.\n\n- **Làm việc với con trỏ.** Khi làm việc với con trỏ nếu không cẩn thận bạn rất dễ bị dính những lỗi cực kì khó debug, vì triệu chứng lỗi của con trỏ thường hay thay đổi theo thời gian nên có thể nói lỗi về con trỏ là \"nỗi khiếp sợ \" của lập trình viên.\n\nVà đây sẽ là cách để bạn tránh những trường hợp như vậy xảy ra:\n\n**Khởi tạo biến ngay khi nó được khai báo.** \n\n```c\n float studentGrades[ MAX_STUDENTS ] = { 0.0 }\n```\n\n**Khởi tạo biến ngay trước khi nó được dùng lần đầu tiên**.\n\nVí dụ:\n\n```\n\nDim accountIndex As Integer\n\naccountIndex = 0\n' code using accountIndex\n...\n\nDim total As Double\ntotal = 0.0       <-- 1\n' code using total\n...\n\nDim done As Boolean\ndone = False       <-- 2\n' code using done\nWhile Not done\n...\n(1) total được khai báo và khởi tạo gần với vị trí nó được sử dụng lần đầu tiên\n(2) done cũng được khai báo và khởi tạo gần với vị trí nó được sử dụng lần đầu tiên\n\n```\nĐây chính là ví dụ cho  **Nguyên Tắc Tiệm Cận**: **\"Hãy giữ những  thứ có liên quan ở gần nhau\"**. Ta có thể áp dụng nguyên tắc này trong việc giữ những comment gần với code mà được chúng giải thích, hoặc là giữ sự thiết lập vòng lặp gần vòng lặp hoặc là giữ những lời gọi (tham chiếu)  đến 1 biến gần nhau (cái này sẽ được nói chi tiết trong bài nói về phạm vi biến) và còn rất nhiều trường hợp để áp dụng nguyên tắc này nữa.\n\n**Sử dụng `final` hoặc là `const` khi có thể**.Với những biến mà được khai báo bằng `final` trong Java hoặc `const` trong C++, bạn có thể bảo vệ biến của bạn từ khi bạn khởi tạo cho nó một giá trị nào đó. \n\n**Và bạn hãy nhớ chú ý đến các biến kiểu như biến đếm.** Những biến như là `i`, `j`, `k`,`sum` và `total` thường được sử dụng làm biến đếm, biến tích trữ. Lỗi cơ bản trong lập trình là việc quên mất không reset các biến đếm trước khi sử dụng chúng tiếp ở lần sau.\n\n**Hãy tận dụng lợi thế của các cảnh báo của compiler.** Nhiều trình biên dịch cảnh báo bạn rằng bạn quên khởi tạo biến. \n\n**Luôn kiểm tra tính hợp lệ của các tham số truyền vào.** Trước khi bạn gán giá trị truyền vào, hãy chắc chắn rằng nó hợp lệ.\n\n**Sử dụng memory-access checkers để debug mấy lỗi về con trỏ** (chưa dùng cái này bao giờ, bác nào biết xin chỉ giáo :joy:) \n\n**Debug lỗi con trỏ bằng cách nhập những giá trị đặc biệt**. Giá trị 0 là lựa chọn tốt vì nó dễ bị phát hiện ra hơn khi chúng được sử dụng. Với vi xử lí Intel, 0xCC là một giá trị khá tốt để sử dụng. Một ích lợi khác của giá trị 0xCC là nó rất dễ dàng nhận ra trong memory dump - và nó ít khi được sử dụng với lí do chính thống. Ngoài ra, bạn cũng có thể sử dụng hằng số 0xDEADBEEF cho việc này. (vãi cả thịt bò chết :smile: hình như có liên quan đến câu hỏi tuyển dụng của google thì phải)\n\n **Và cuối cùng là đừng quên khởi tạo bộ nhớ làm việc khi bắt đầu chương trình**.\n\n----------\nBài viết có tham khảo một số nội dung trong cuốn Code Complete và các tài liệu khác :blush:\n\n------------\nPart2 ở đây: http://daynhauhoc.com/t/lam-sao-de-su-dung-bien-hieu-qua-hon-part2/6936\nPart3 ở đây: http://daynhauhoc.com/t/lam-sao-de-su-dung-bien-hieu-qua-hon-part3/6992\nPart4 ở đây: http://daynhauhoc.com/t/lam-sao-de-su-dung-bien-hieu-qua-hon-part-4/7063\n","raw":"---json\n{\"id\":6921,\"layout\":\"Post\",\"route\":\"lam-sao-de-su-dung-bien-hieu-qua-hon-part1\",\"title\":\"Làm sao để sử dụng biến hiệu quả hơn (part1)\",\"tags\":[\"coding-style\"],\"date\":\"2015-05-05T17:12:29.073Z\"}\n---\n\nKhi chương trình còn đơn giản thì việc sử dụng biến thường không thành vấn đề, nhưng khi bạn làm những chương trình lớn hơn thì việc sử dụng biến thế nào cho dễ quản lí, tránh lỗi không mong muốn và dễ bảo trì, nâng cấp sau này thì không đơn giản tí nào :blush: \n\n#Part1: Một số lưu ý về khi khai báo biến và khởi tạo biến (Declarations and Initializing Variables)\n\n<div align=center><img src='/uploads/default/2981/7532b9c68694adf2.jpg'></div>\n\n##Không sử dụng tính năng khai báo ẩn(Implicit Declarations)\n-----\n\nMột số ngôn ngữ hỗ trợ khai báo ẩn, tức là khi bạn quên mất không khai báo biến nào đó thì compiler sẽ tự động khai báo cho bạn (ví dụ như Visual Basic). Chức năng này thực sự rất nguy hiểm và đây là một số lưu ý với tính năng này:\n\n \n**Tắt khai báo ẩn**. Một số trình biên dịch cho phép tắt khai báo ẩn.  Ví dụ, trong Visual Basic bạn có thể dùng câu lệnh *Option Explicit*, câu đó sẽ bắt bạn phải khai báo toàn bộ các biến trước khi bạn sử dụng chúng.\n\n**Khai báo tất cả các biến**. Khi bạn gõ một biến mới, hãy khai báo nó, dù cho compiler không yêu cầu\n\n##Khởi tạo biến\n-----\n\nĐây là 3 trường hợp phổ biến về việc biến tự dưng có những giá trị mà bạn không ngờ tới:\n\n- **Biến từ đầu đã chưa hề được gán giá trị**. Vì thế nên giá trị của nó có thể là bất kì giá trị nào trong bộ nhớ từ khi khởi động chương trình.\n\n-  **Giá trị của biến đã \"hết hạn sử dụng\"**. Biến đã được gán một giá trị tại một số thời điểm nào đó, nhưng giá trị đó sau này không còn hợp lệ nữa.\n\n- **Làm việc với con trỏ.** Khi làm việc với con trỏ nếu không cẩn thận bạn rất dễ bị dính những lỗi cực kì khó debug, vì triệu chứng lỗi của con trỏ thường hay thay đổi theo thời gian nên có thể nói lỗi về con trỏ là \"nỗi khiếp sợ \" của lập trình viên.\n\nVà đây sẽ là cách để bạn tránh những trường hợp như vậy xảy ra:\n\n**Khởi tạo biến ngay khi nó được khai báo.** \n\n```c\n float studentGrades[ MAX_STUDENTS ] = { 0.0 }\n```\n\n**Khởi tạo biến ngay trước khi nó được dùng lần đầu tiên**.\n\nVí dụ:\n\n```\n\nDim accountIndex As Integer\n\naccountIndex = 0\n' code using accountIndex\n...\n\nDim total As Double\ntotal = 0.0       <-- 1\n' code using total\n...\n\nDim done As Boolean\ndone = False       <-- 2\n' code using done\nWhile Not done\n...\n(1) total được khai báo và khởi tạo gần với vị trí nó được sử dụng lần đầu tiên\n(2) done cũng được khai báo và khởi tạo gần với vị trí nó được sử dụng lần đầu tiên\n\n```\nĐây chính là ví dụ cho  **Nguyên Tắc Tiệm Cận**: **\"Hãy giữ những  thứ có liên quan ở gần nhau\"**. Ta có thể áp dụng nguyên tắc này trong việc giữ những comment gần với code mà được chúng giải thích, hoặc là giữ sự thiết lập vòng lặp gần vòng lặp hoặc là giữ những lời gọi (tham chiếu)  đến 1 biến gần nhau (cái này sẽ được nói chi tiết trong bài nói về phạm vi biến) và còn rất nhiều trường hợp để áp dụng nguyên tắc này nữa.\n\n**Sử dụng `final` hoặc là `const` khi có thể**.Với những biến mà được khai báo bằng `final` trong Java hoặc `const` trong C++, bạn có thể bảo vệ biến của bạn từ khi bạn khởi tạo cho nó một giá trị nào đó. \n\n**Và bạn hãy nhớ chú ý đến các biến kiểu như biến đếm.** Những biến như là `i`, `j`, `k`,`sum` và `total` thường được sử dụng làm biến đếm, biến tích trữ. Lỗi cơ bản trong lập trình là việc quên mất không reset các biến đếm trước khi sử dụng chúng tiếp ở lần sau.\n\n**Hãy tận dụng lợi thế của các cảnh báo của compiler.** Nhiều trình biên dịch cảnh báo bạn rằng bạn quên khởi tạo biến. \n\n**Luôn kiểm tra tính hợp lệ của các tham số truyền vào.** Trước khi bạn gán giá trị truyền vào, hãy chắc chắn rằng nó hợp lệ.\n\n**Sử dụng memory-access checkers để debug mấy lỗi về con trỏ** (chưa dùng cái này bao giờ, bác nào biết xin chỉ giáo :joy:) \n\n**Debug lỗi con trỏ bằng cách nhập những giá trị đặc biệt**. Giá trị 0 là lựa chọn tốt vì nó dễ bị phát hiện ra hơn khi chúng được sử dụng. Với vi xử lí Intel, 0xCC là một giá trị khá tốt để sử dụng. Một ích lợi khác của giá trị 0xCC là nó rất dễ dàng nhận ra trong memory dump - và nó ít khi được sử dụng với lí do chính thống. Ngoài ra, bạn cũng có thể sử dụng hằng số 0xDEADBEEF cho việc này. (vãi cả thịt bò chết :smile: hình như có liên quan đến câu hỏi tuyển dụng của google thì phải)\n\n **Và cuối cùng là đừng quên khởi tạo bộ nhớ làm việc khi bắt đầu chương trình**.\n\n----------\nBài viết có tham khảo một số nội dung trong cuốn Code Complete và các tài liệu khác :blush:\n\n------------\nPart2 ở đây: http://daynhauhoc.com/t/lam-sao-de-su-dung-bien-hieu-qua-hon-part2/6936\nPart3 ở đây: http://daynhauhoc.com/t/lam-sao-de-su-dung-bien-hieu-qua-hon-part3/6992\nPart4 ở đây: http://daynhauhoc.com/t/lam-sao-de-su-dung-bien-hieu-qua-hon-part-4/7063\n","__filename":"posts/6921.md","__url":"/lam-sao-de-su-dung-bien-hieu-qua-hon-part1/","__resourceUrl":"/lam-sao-de-su-dung-bien-hieu-qua-hon-part1/index.html","__dataUrl":"/lam-sao-de-su-dung-bien-hieu-qua-hon-part1/index.html.aa34520f10b3e4110f4630e2c10ab015.json"}
{"head":{"id":22231,"layout":"Post","route":"fastest-way-to-learn-basic-of-oop-p3","title":"Fastest way to learn basic of OOP [P3]","tags":["oop","basic"],"date":"2016-03-16T06:11:25.322Z","description":"Chào cả nhà, trưa không ngủ được nên ngồi viết bài luôn ^^.\nQua 2 phần của Fastest way to learn basic of Programming thì các…"},"body":"<p>Chào cả nhà, trưa không ngủ được nên ngồi viết bài luôn ^^.\nQua 2 phần của Fastest way to learn basic of Programming thì các newbie chắc hẳn cũng đã hiểu đc phần nào các định nghĩa lằng nhằng của Lập Trình. Và bây giờ, bài viết này sẽ giúp các bạn lướt nhanh qua hơn 30 trang về định nghĩa Lập Trình Hướng đối tượng. Bắt đầu</p>\n<p>Phần 2 bạn xem lại tại <a href=\"http://daynhauhoc.com/t/fastest-way-to-learn-basic-of-programming-p2/22178\">http://daynhauhoc.com/t/fastest-way-to-learn-basic-of-programming-p2/22178</a></p>\n<h1> BƯỚC SÂU HƠN VÀO LẬP TRÌNH </H1>\n<h2> Bước vào OOP </h2>\n<b> Lập trình hướng đối tượng</b>: là kiểu lập trình quy về đối tượng ,nó xem mọi thứ là đối tượng. Hiểu đơn giản thế này... mọi thứ đều là obj (đối tượng), từ cái biến, cái thủ tục, cái lớp gì gì ấy đều là đối tượng. Cái gì hữu hình, vật thể cụ thể đều là obj. và bất kì đối tượng nào đều phải ở trong một lớp\nVD: Công an hỏi chuyện vs 1 thằng phạm nhân, thì ông công an là obj, thằng phạm nhân là obj, tờ giấy, cây viết là obj, hung khí gây án là obj, cái căn phòng là cái class (lớp) chứa mấy cái obj ấy, nhưng bản thân cái phòng lại là obj đấy.\n<img src=\"//daynhauhoc.s3-ap-southeast-1.amazonaws.com/original/2X/a/aafbc4b3764b2d9cebe704d8a560a8a2f1fabcea.png\" width=\"277\" height=\"182\">\n<b>Vậy rồi đối tượng là gì?</b> Đối tượng (Object- viết tắt là Obj) là một thứ hữu hình, vật thể cụ thể hay không cụ thể đều là Obj, xem vd trên nhé ^^\n```\nFact: Xu hướng hiện nay là Đối tượng hóa các ngôn ngữ lập trình, trong đó ưu tú nhất là Java\n```\n<b>Lớp (Class)</b>: Là bản thiết kế của một thực thể (hack não nhỉ?) hiểu đơn giản hơn là nó giống như một thực thể, <b>nó đơn giản chỉ là nơi chứa mấy cái Phương Thức vs Thuộc tính thôi mà </b>\nVD nhé: Ở ngoài tiệm sách bạn thấy một biển quảng cáo cuốn sách bìa vàng, dày 690 trang (thì cuốn sách ấy là Lớp, nó chứa các thuộc tính và phương thức bên trong nó) nhưng khi bạn mua về thì nó nằm trong tay bạn (bây giờ cuốn sách của bạn là Obj của cuốn sách ấy, vì nó cụ thể hóa cuốn sách, không còn chỉ là quảng cáo hư cấu nữa). :joy:\n```\nClass Sach {     // đây là cuốn sách trong quảng cáo (nó chưa có thực)\n int sotrang = 690;\n color maubia = yellow;\n string tuade = \"Fastest way to ...\";\n}\nClass TuSachNhaMinh {  //tủ sách này không có thật\n public static void main (String[] args) {   // làm cho tủ sách có thật\n  Sach sachcuaminh = new Sach(); //đây là cuốn sách đã mua -> nó có thật (tạo đối tượng)\n }\n}\n```\n<b>Thuộc Tính (Properties)</b>: Đơn giản là cái biến nằm trong lớp thôi.\n<b>Phương Thức (Methods)</b>: Đây là... cái hàm nằm trong lớp. (<strike>Định mệnh, làm mất mấy ngày đọc hiểu của bố :rage:</strike>).\n```\nFact: Các thuộc tính và phương thức của lớp chỉ có thể sử dụng khi lớp đã trở thành đối tượng.\n```\n<p><b>Khởi tạo</b>: đây là cái phương thức có tên giống tên lớp mà khi tạo đối tượng từ một lớp thì nó sẽ thực hiện\nVD: Sách có khởi tạo là giảm giá 69%, thì khi mua sẽ được giảm giá 69% đúng như khởi tạo.</p>\n<pre><code>class Sach {\n int sogia = 69000;\n Sach () {  //đây là khởi tạo, tên phải giống tên lớp\n  sogia -= sogia*(69/100);\n }\n}\nclass TuSach {\n public static void main(String[]args) {\n  Sach sachcuatoi = new Sach(); //tạo đối tượng -&gt; tự chạy khởi tạo\n  System.out.println(sachcuatoi.sogia); //gia se khong con la 69000 nua\n }\n}\n</code></pre>\n<p><b>Các Phạm vi Truy Cập</b>: Access-Modifiers (các phạm vi truy cập) chia làm 3 loại\n<i>Public</i>: truy cập bởi mọi thứ, mọi nơi\n<i>Protected</i>: protected sẽ là public đối với class con và private đối với các class còn lại\n<i>Private</i> : chỉ được truy cập bởi các thành viên bên trong chính lớp đó\nChi tiết hơn tại hình bên dưới :smiley:\n<img src=\"//daynhauhoc.s3-ap-southeast-1.amazonaws.com/original/2X/0/09418faded28588ffbbfa2c51cfedf1f4262dbe0.png\" width=\"690\" height=\"161\"></p>\n<pre><code>Fact: Nếu không đặt Access-Modifier trước mỗi thành viên thì mặc định sẽ là public đối với các class cùng package và private đối với các class k cùng package\n</code></pre>\n<p><b>Package</b>: gói - là nơi chứa những lớp liên quan. Khi muốn gọi một gói nào đó thì cần import nó\nmặc định Java sẽ import gói java.lang.<em>;  -&gt; </em> - biểu thị gọi toàn bộ lớp trong gói ấy. Chính xác gói là cái folder chứa lớp ^^ và các thứ khác.</p>\n<pre><code>Fact: Các gói thường đặt tên bằng chữ thường, các từ cách nhau bằng &quot; . &quot;\n</code></pre>\n<p>Hôm nay bấy nhiêu thôi, vì OOP ban đầu khá khó nhưng hiểu đc rồi thì thấy nó rất dễ dàng. Chúc các bạn thành công ^^</p>\n<p><strike>Hãy bấm like hoặc reply để ủng hộ tác giả</strike></p>\n","rawBody":"\nChào cả nhà, trưa không ngủ được nên ngồi viết bài luôn ^^.\nQua 2 phần của Fastest way to learn basic of Programming thì các newbie chắc hẳn cũng đã hiểu đc phần nào các định nghĩa lằng nhằng của Lập Trình. Và bây giờ, bài viết này sẽ giúp các bạn lướt nhanh qua hơn 30 trang về định nghĩa Lập Trình Hướng đối tượng. Bắt đầu\n\nPhần 2 bạn xem lại tại http://daynhauhoc.com/t/fastest-way-to-learn-basic-of-programming-p2/22178\n\n<h1> BƯỚC SÂU HƠN VÀO LẬP TRÌNH </H1>\n<h2> Bước vào OOP </h2>\n<b> Lập trình hướng đối tượng</b>: là kiểu lập trình quy về đối tượng ,nó xem mọi thứ là đối tượng. Hiểu đơn giản thế này... mọi thứ đều là obj (đối tượng), từ cái biến, cái thủ tục, cái lớp gì gì ấy đều là đối tượng. Cái gì hữu hình, vật thể cụ thể đều là obj. và bất kì đối tượng nào đều phải ở trong một lớp\nVD: Công an hỏi chuyện vs 1 thằng phạm nhân, thì ông công an là obj, thằng phạm nhân là obj, tờ giấy, cây viết là obj, hung khí gây án là obj, cái căn phòng là cái class (lớp) chứa mấy cái obj ấy, nhưng bản thân cái phòng lại là obj đấy.\n<img src=\"//daynhauhoc.s3-ap-southeast-1.amazonaws.com/original/2X/a/aafbc4b3764b2d9cebe704d8a560a8a2f1fabcea.png\" width=\"277\" height=\"182\">\n<b>Vậy rồi đối tượng là gì?</b> Đối tượng (Object- viết tắt là Obj) là một thứ hữu hình, vật thể cụ thể hay không cụ thể đều là Obj, xem vd trên nhé ^^\n```\nFact: Xu hướng hiện nay là Đối tượng hóa các ngôn ngữ lập trình, trong đó ưu tú nhất là Java\n```\n<b>Lớp (Class)</b>: Là bản thiết kế của một thực thể (hack não nhỉ?) hiểu đơn giản hơn là nó giống như một thực thể, <b>nó đơn giản chỉ là nơi chứa mấy cái Phương Thức vs Thuộc tính thôi mà </b>\nVD nhé: Ở ngoài tiệm sách bạn thấy một biển quảng cáo cuốn sách bìa vàng, dày 690 trang (thì cuốn sách ấy là Lớp, nó chứa các thuộc tính và phương thức bên trong nó) nhưng khi bạn mua về thì nó nằm trong tay bạn (bây giờ cuốn sách của bạn là Obj của cuốn sách ấy, vì nó cụ thể hóa cuốn sách, không còn chỉ là quảng cáo hư cấu nữa). :joy:\n```\nClass Sach {     // đây là cuốn sách trong quảng cáo (nó chưa có thực)\n int sotrang = 690;\n color maubia = yellow;\n string tuade = \"Fastest way to ...\";\n}\nClass TuSachNhaMinh {  //tủ sách này không có thật\n public static void main (String[] args) {   // làm cho tủ sách có thật\n  Sach sachcuaminh = new Sach(); //đây là cuốn sách đã mua -> nó có thật (tạo đối tượng)\n }\n}\n```\n<b>Thuộc Tính (Properties)</b>: Đơn giản là cái biến nằm trong lớp thôi.\n<b>Phương Thức (Methods)</b>: Đây là... cái hàm nằm trong lớp. (<strike>Định mệnh, làm mất mấy ngày đọc hiểu của bố :rage:</strike>).\n```\nFact: Các thuộc tính và phương thức của lớp chỉ có thể sử dụng khi lớp đã trở thành đối tượng.\n```\n\n<b>Khởi tạo</b>: đây là cái phương thức có tên giống tên lớp mà khi tạo đối tượng từ một lớp thì nó sẽ thực hiện\nVD: Sách có khởi tạo là giảm giá 69%, thì khi mua sẽ được giảm giá 69% đúng như khởi tạo.\n```\nclass Sach {\n int sogia = 69000;\n Sach () {  //đây là khởi tạo, tên phải giống tên lớp\n  sogia -= sogia*(69/100);\n }\n}\nclass TuSach {\n public static void main(String[]args) {\n  Sach sachcuatoi = new Sach(); //tạo đối tượng -> tự chạy khởi tạo\n  System.out.println(sachcuatoi.sogia); //gia se khong con la 69000 nua\n }\n}\n```\n<b>Các Phạm vi Truy Cập</b>: Access-Modifiers (các phạm vi truy cập) chia làm 3 loại\n<i>Public</i>: truy cập bởi mọi thứ, mọi nơi\n<i>Protected</i>: protected sẽ là public đối với class con và private đối với các class còn lại\n<i>Private</i> : chỉ được truy cập bởi các thành viên bên trong chính lớp đó\nChi tiết hơn tại hình bên dưới :smiley: \n<img src=\"//daynhauhoc.s3-ap-southeast-1.amazonaws.com/original/2X/0/09418faded28588ffbbfa2c51cfedf1f4262dbe0.png\" width=\"690\" height=\"161\">\n```\nFact: Nếu không đặt Access-Modifier trước mỗi thành viên thì mặc định sẽ là public đối với các class cùng package và private đối với các class k cùng package\n```\n<b>Package</b>: gói - là nơi chứa những lớp liên quan. Khi muốn gọi một gói nào đó thì cần import nó\nmặc định Java sẽ import gói java.lang.*;  -> * - biểu thị gọi toàn bộ lớp trong gói ấy. Chính xác gói là cái folder chứa lớp ^^ và các thứ khác.\n```\nFact: Các gói thường đặt tên bằng chữ thường, các từ cách nhau bằng \" . \"\n```\n\nHôm nay bấy nhiêu thôi, vì OOP ban đầu khá khó nhưng hiểu đc rồi thì thấy nó rất dễ dàng. Chúc các bạn thành công ^^\n\n<strike>Hãy bấm like hoặc reply để ủng hộ tác giả</strike>\n","raw":"---json\n{\"id\":22231,\"layout\":\"Post\",\"route\":\"fastest-way-to-learn-basic-of-oop-p3\",\"title\":\"Fastest way to learn basic of OOP [P3]\",\"tags\":[\"oop\",\"basic\"],\"date\":\"2016-03-16T06:11:25.322Z\"}\n---\n\nChào cả nhà, trưa không ngủ được nên ngồi viết bài luôn ^^.\nQua 2 phần của Fastest way to learn basic of Programming thì các newbie chắc hẳn cũng đã hiểu đc phần nào các định nghĩa lằng nhằng của Lập Trình. Và bây giờ, bài viết này sẽ giúp các bạn lướt nhanh qua hơn 30 trang về định nghĩa Lập Trình Hướng đối tượng. Bắt đầu\n\nPhần 2 bạn xem lại tại http://daynhauhoc.com/t/fastest-way-to-learn-basic-of-programming-p2/22178\n\n<h1> BƯỚC SÂU HƠN VÀO LẬP TRÌNH </H1>\n<h2> Bước vào OOP </h2>\n<b> Lập trình hướng đối tượng</b>: là kiểu lập trình quy về đối tượng ,nó xem mọi thứ là đối tượng. Hiểu đơn giản thế này... mọi thứ đều là obj (đối tượng), từ cái biến, cái thủ tục, cái lớp gì gì ấy đều là đối tượng. Cái gì hữu hình, vật thể cụ thể đều là obj. và bất kì đối tượng nào đều phải ở trong một lớp\nVD: Công an hỏi chuyện vs 1 thằng phạm nhân, thì ông công an là obj, thằng phạm nhân là obj, tờ giấy, cây viết là obj, hung khí gây án là obj, cái căn phòng là cái class (lớp) chứa mấy cái obj ấy, nhưng bản thân cái phòng lại là obj đấy.\n<img src=\"//daynhauhoc.s3-ap-southeast-1.amazonaws.com/original/2X/a/aafbc4b3764b2d9cebe704d8a560a8a2f1fabcea.png\" width=\"277\" height=\"182\">\n<b>Vậy rồi đối tượng là gì?</b> Đối tượng (Object- viết tắt là Obj) là một thứ hữu hình, vật thể cụ thể hay không cụ thể đều là Obj, xem vd trên nhé ^^\n```\nFact: Xu hướng hiện nay là Đối tượng hóa các ngôn ngữ lập trình, trong đó ưu tú nhất là Java\n```\n<b>Lớp (Class)</b>: Là bản thiết kế của một thực thể (hack não nhỉ?) hiểu đơn giản hơn là nó giống như một thực thể, <b>nó đơn giản chỉ là nơi chứa mấy cái Phương Thức vs Thuộc tính thôi mà </b>\nVD nhé: Ở ngoài tiệm sách bạn thấy một biển quảng cáo cuốn sách bìa vàng, dày 690 trang (thì cuốn sách ấy là Lớp, nó chứa các thuộc tính và phương thức bên trong nó) nhưng khi bạn mua về thì nó nằm trong tay bạn (bây giờ cuốn sách của bạn là Obj của cuốn sách ấy, vì nó cụ thể hóa cuốn sách, không còn chỉ là quảng cáo hư cấu nữa). :joy:\n```\nClass Sach {     // đây là cuốn sách trong quảng cáo (nó chưa có thực)\n int sotrang = 690;\n color maubia = yellow;\n string tuade = \"Fastest way to ...\";\n}\nClass TuSachNhaMinh {  //tủ sách này không có thật\n public static void main (String[] args) {   // làm cho tủ sách có thật\n  Sach sachcuaminh = new Sach(); //đây là cuốn sách đã mua -> nó có thật (tạo đối tượng)\n }\n}\n```\n<b>Thuộc Tính (Properties)</b>: Đơn giản là cái biến nằm trong lớp thôi.\n<b>Phương Thức (Methods)</b>: Đây là... cái hàm nằm trong lớp. (<strike>Định mệnh, làm mất mấy ngày đọc hiểu của bố :rage:</strike>).\n```\nFact: Các thuộc tính và phương thức của lớp chỉ có thể sử dụng khi lớp đã trở thành đối tượng.\n```\n\n<b>Khởi tạo</b>: đây là cái phương thức có tên giống tên lớp mà khi tạo đối tượng từ một lớp thì nó sẽ thực hiện\nVD: Sách có khởi tạo là giảm giá 69%, thì khi mua sẽ được giảm giá 69% đúng như khởi tạo.\n```\nclass Sach {\n int sogia = 69000;\n Sach () {  //đây là khởi tạo, tên phải giống tên lớp\n  sogia -= sogia*(69/100);\n }\n}\nclass TuSach {\n public static void main(String[]args) {\n  Sach sachcuatoi = new Sach(); //tạo đối tượng -> tự chạy khởi tạo\n  System.out.println(sachcuatoi.sogia); //gia se khong con la 69000 nua\n }\n}\n```\n<b>Các Phạm vi Truy Cập</b>: Access-Modifiers (các phạm vi truy cập) chia làm 3 loại\n<i>Public</i>: truy cập bởi mọi thứ, mọi nơi\n<i>Protected</i>: protected sẽ là public đối với class con và private đối với các class còn lại\n<i>Private</i> : chỉ được truy cập bởi các thành viên bên trong chính lớp đó\nChi tiết hơn tại hình bên dưới :smiley: \n<img src=\"//daynhauhoc.s3-ap-southeast-1.amazonaws.com/original/2X/0/09418faded28588ffbbfa2c51cfedf1f4262dbe0.png\" width=\"690\" height=\"161\">\n```\nFact: Nếu không đặt Access-Modifier trước mỗi thành viên thì mặc định sẽ là public đối với các class cùng package và private đối với các class k cùng package\n```\n<b>Package</b>: gói - là nơi chứa những lớp liên quan. Khi muốn gọi một gói nào đó thì cần import nó\nmặc định Java sẽ import gói java.lang.*;  -> * - biểu thị gọi toàn bộ lớp trong gói ấy. Chính xác gói là cái folder chứa lớp ^^ và các thứ khác.\n```\nFact: Các gói thường đặt tên bằng chữ thường, các từ cách nhau bằng \" . \"\n```\n\nHôm nay bấy nhiêu thôi, vì OOP ban đầu khá khó nhưng hiểu đc rồi thì thấy nó rất dễ dàng. Chúc các bạn thành công ^^\n\n<strike>Hãy bấm like hoặc reply để ủng hộ tác giả</strike>\n","__filename":"posts/22231.md","__url":"/fastest-way-to-learn-basic-of-oop-p3/","__resourceUrl":"/fastest-way-to-learn-basic-of-oop-p3/index.html","__dataUrl":"/fastest-way-to-learn-basic-of-oop-p3/index.html.9188e52bb9be3b673097ff1d546f0d27.json"}